"use strict";

require("core-js/modules/es.regexp.to-string");

define([], function () {
  var maxId = 0;
  var module = {
    // =========================================================================   
    // define class
    // =========================================================================
    object: function object(prototype) {
      return Object.create(prototype);
    },
    _generateConstructorFunction: function _generateConstructorFunction() {
      var _ConstructorFunction = null;

      _ConstructorFunction = function ConstructorFunction() {
        if (!(this instanceof _ConstructorFunction)) {
          return new _ConstructorFunction("blub", arguments);
        }

        if (this.init) {
          if (arguments.length == 2 && arguments[0] === "blub") {
            this.init.apply(this, arguments[1]);
          } else {
            this.init.apply(this, arguments);
          }
        }
      };

      _ConstructorFunction.derive = function (prototype) {
        return module.defineDerivedClass(this, prototype);
      };

      return _ConstructorFunction;
    },
    defineClass: function defineClass(prototype) {
      var Cls = module._generateConstructorFunction();

      Cls.prototype = prototype;
      Cls.prototype.constructor = Cls;
      return Cls;
    },
    defineDerivedClass: function defineDerivedClass(parentClass, prototype) {
      var Cls = module._generateConstructorFunction();

      Cls.prototype = module.extend(module.object(parentClass.prototype), prototype);
      Cls.prototype.constructor = Cls;
      return Cls;
    },
    // ===================================================================
    // type helpers
    // ===================================================================
    getType: function getType(obj) {
      if (typeof obj === 'function') return 'function';
      if (typeof obj === 'string') return 'simple';
      if (typeof obj === 'number') return 'simple';
      if (typeof obj === 'boolean') return 'simple';

      if (typeof obj === 'object') {
        if (Object.prototype.toString.call(obj) === '[object Array]') return 'list';
        return 'object';
      }

      throw "Not supported type:" + typeof obj;
    },
    isList: function isList(obj) {
      return this.getType(obj) === 'list';
    },
    isObject: function isObject(obj) {
      return this.getType(obj) === 'object';
    },
    isFunction: function isFunction(obj) {
      return this.getType(obj) === 'function';
    },
    isString: function isString(obj) {
      return typeof obj === 'string';
    },
    // ===================================================================
    // list helpers
    // ===================================================================
    hasObject: function hasObject(list, obj) {
      for (var i = 0; i < list.length; ++i) {
        var testObj = list[i];

        if (testObj === obj) {
          return true;
        }
      }

      return false;
    },
    removeObject: function removeObject(list, obj) {
      var numDel = 0;

      for (var i = 0; i < list.length; ++i) {
        var testObj = list[i];

        if (testObj === obj) {
          numDel++;
          list.splice(i, 1);
          i--;
          continue;
        }
      }

      return numDel;
    },
    splice: function splice(list, index, numDel, inserts) {
      var args = [];
      args.push(index, numDel);

      if (inserts) {
        args.push.apply(args, inserts);
      }

      list.splice.apply(list, args);
    },
    removeAll: function removeAll(list) {
      module.splice(list, 0, list.length);
    },
    // ===================================================================
    // object helpers
    // ===================================================================
    extend: function extend(obj1, obj2) {
      for (var propertyName in obj2) {
        obj1[propertyName] = obj2[propertyName];
      }

      return obj1;
    },
    cloneExtend: function cloneExtend(obj1, obj2) {
      var clone = this.extend({}, obj1);
      return this.extend(clone, obj2);
    },
    isEmpty: function isEmpty(obj) {
      for (var prop in obj) {
        return false;
      }

      return true;
    },
    get: function get(obj, key, defaultGenerator) {
      var value = obj[key];

      if (value) {
        return value;
      }

      value = defaultGenerator();
      obj[key] = value;
      return value;
    },
    defaultList: function defaultList() {
      return [];
    },
    defaultObject: function defaultObject() {
      return {};
    },
    // ===================================================================
    // id generation
    // ===================================================================
    generateId: function generateId() {
      return '#' + ++maxId;
    },
    argumentsToList: function argumentsToList(args) {
      return Array.prototype.slice.call(args);
    },
    // ===================================================================
    // others
    // ===================================================================
    remToPixels: function remToPixels(rem) {
      return rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
    }
  };
  return module;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,