"use strict";

define(['../../core/core', '../../core/event', './ListManager', '../property/CalculatedProperty', './ListFilter', './DummyListFilter'], function (core, event, ListManager, CalculatedProperty, ListFilter, DummyListFilter) {
  return core.defineDerivedClass(ListManager, {
    init: function init(params) {
      this.list = params.list;
      this.filter = params.filter;
      this.targetList = params.targetList;
      ListManager.prototype.init.apply(this, arguments);
    },
    calculate: function calculate() {
      core.removeAll(this.targetList);
      event.addEventHandler(this.list, 'splice', this, this.spliceHandler);
      event.addEventHandler(this.list, 'push', this, this.pushHandler);
      var dummyListFilter = new DummyListFilter();

      for (var i = 0; i < this.list.length; ++i) {
        this.adminList.push(this.createAdmin(this.list, i, dummyListFilter));
      }

      this.listFilter = new ListFilter({
        list: this.list,
        filteredList: this.targetList,
        visibility: dummyListFilter.visibility
      });

      for (i = 0; i < this.adminList.length; ++i) {
        var admin = this.adminList[i];
        admin.listFilter = this.listFilter;
      }
    },
    createAdmin: function createAdmin(list, index, listFilter) {
      var admin = {
        list: list,
        index: index,
        listFilter: listFilter,
        calculatedProperty: null
      };
      admin.calculatedProperty = new CalculatedProperty({
        start: true,
        calc: function () {
          return this.filter(admin.list[admin.index]);
        }.bind(this),
        callback: function (visibility) {
          admin.listFilter.setVisibility(admin.index, visibility);
        }.bind(this)
      });
      return admin;
    },
    spliceHandler: function spliceHandler(signal, spliceArgs) {
      var index = spliceArgs[0];
      var numDel = spliceArgs[1];
      var insertElements = spliceArgs.slice(2);

      for (var i = 0; i < numDel; ++i) {
        var admin = this.adminList[index + i];
        admin.calculatedProperty.stop();
      }

      var insertAdmin = [];
      var dummyListFilter = new DummyListFilter();

      for (i = 0; i < insertElements.length; ++i) {
        insertAdmin.push(this.createAdmin(insertElements, i, dummyListFilter));
      }

      core.splice(this.adminList, index, numDel, insertAdmin);

      for (i = index; i < index + insertElements.length; ++i) {
        var admin = this.adminList[i];
        admin.list = this.list;
        admin.index = index;
        admin.listFilter = this.listFilter;
      }

      for (i = index + insertElements.length; i < this.adminList.length; ++i) {
        var admin = this.adminList[i];
        admin.index += insertElements.length - numDel;
      }

      this.listFilter.splice(index, numDel, insertElements, dummyListFilter.visibility);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90dC9saXN0L0ZpbHRlcmVkTGlzdE1hbmFnZXIuanMiXSwibmFtZXMiOlsiZGVmaW5lIiwiY29yZSIsImV2ZW50IiwiTGlzdE1hbmFnZXIiLCJDYWxjdWxhdGVkUHJvcGVydHkiLCJMaXN0RmlsdGVyIiwiRHVtbXlMaXN0RmlsdGVyIiwiZGVmaW5lRGVyaXZlZENsYXNzIiwiaW5pdCIsInBhcmFtcyIsImxpc3QiLCJmaWx0ZXIiLCJ0YXJnZXRMaXN0IiwicHJvdG90eXBlIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJjYWxjdWxhdGUiLCJyZW1vdmVBbGwiLCJhZGRFdmVudEhhbmRsZXIiLCJzcGxpY2VIYW5kbGVyIiwicHVzaEhhbmRsZXIiLCJkdW1teUxpc3RGaWx0ZXIiLCJpIiwibGVuZ3RoIiwiYWRtaW5MaXN0IiwicHVzaCIsImNyZWF0ZUFkbWluIiwibGlzdEZpbHRlciIsImZpbHRlcmVkTGlzdCIsInZpc2liaWxpdHkiLCJhZG1pbiIsImluZGV4IiwiY2FsY3VsYXRlZFByb3BlcnR5Iiwic3RhcnQiLCJjYWxjIiwiYmluZCIsImNhbGxiYWNrIiwic2V0VmlzaWJpbGl0eSIsInNpZ25hbCIsInNwbGljZUFyZ3MiLCJudW1EZWwiLCJpbnNlcnRFbGVtZW50cyIsInNsaWNlIiwic3RvcCIsImluc2VydEFkbWluIiwic3BsaWNlIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUMsQ0FBQyxpQkFBRCxFQUFvQixrQkFBcEIsRUFBd0MsZUFBeEMsRUFBeUQsZ0NBQXpELEVBQTJGLGNBQTNGLEVBQTJHLG1CQUEzRyxDQUFELEVBQWtJLFVBQVVDLElBQVYsRUFBZ0JDLEtBQWhCLEVBQXVCQyxXQUF2QixFQUFvQ0Msa0JBQXBDLEVBQXdEQyxVQUF4RCxFQUFvRUMsZUFBcEUsRUFBcUY7QUFFek4sU0FBT0wsSUFBSSxDQUFDTSxrQkFBTCxDQUF3QkosV0FBeEIsRUFBcUM7QUFFeENLLElBQUFBLElBQUksRUFBRSxjQUFVQyxNQUFW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VUFBTixHQUFtQixLQUFLQSxVQUF4QjtBQUVIOztBQUNELFdBQUtMLENBQUMsR0FBR1MsS0FBSyxHQUFHVSxjQUFjLENBQUNsQixNQUFoQyxFQUF3Q0QsQ0FBQyxHQUFHLEtBQUtFLFNBQUwsQ0FBZUQsTUFBM0QsRUFBbUUsRUFBRUQsQ0FBckUsRUFBd0U7QUFDcEUsWUFBSVEsS0FBSyxHQUFHLEtBQUtOLFNBQUwsQ0FBZUYsQ0FBZixDQUFaO0FBQ0FRLFFBQUFBLEtBQUssQ0FBQ0MsS0FBTixJQUFlVSxjQUFjLENBQUNsQixNQUFmLEdBQXdCaUIsTUFBdkM7QUFDSDs7QUFDRCxXQUFLYixVQUFMLENBQWdCa0IsTUFBaEIsQ0FBdUJkLEtBQXZCLEVBQThCUyxNQUE5QixFQUFzQ0MsY0FBdEMsRUFBc0RwQixlQUFlLENBQUNRLFVBQXRFO0FBQ0g7QUFyRXVDLEdBQXJDLENBQVA7QUF3RUgsQ0ExRUssQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uLy4uL2NvcmUvY29yZScsICcuLi8uLi9jb3JlL2V2ZW50JywgJy4vTGlzdE1hbmFnZXInLCAnLi4vcHJvcGVydHkvQ2FsY3VsYXRlZFByb3BlcnR5JywgJy4vTGlzdEZpbHRlcicsICcuL0R1bW15TGlzdEZpbHRlciddLCBmdW5jdGlvbiAoY29yZSwgZXZlbnQsIExpc3RNYW5hZ2VyLCBDYWxjdWxhdGVkUHJvcGVydHksIExpc3RGaWx0ZXIsIER1bW15TGlzdEZpbHRlcikge1xuXG4gICAgcmV0dXJuIGNvcmUuZGVmaW5lRGVyaXZlZENsYXNzKExpc3RNYW5hZ2VyLCB7XG5cbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgdGhpcy5saXN0ID0gcGFyYW1zLmxpc3Q7XG4gICAgICAgICAgICB0aGlzLmZpbHRlciA9IHBhcmFtcy5maWx0ZXI7XG4gICAgICAgICAgICB0aGlzLnRhcmdldExpc3QgPSBwYXJhbXMudGFyZ2V0TGlzdDtcbiAgICAgICAgICAgIExpc3RNYW5hZ2VyLnByb3RvdHlwZS5pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2FsY3VsYXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb3JlLnJlbW92ZUFsbCh0aGlzLnRhcmdldExpc3QpO1xuICAgICAgICAgICAgZXZlbnQuYWRkRXZlbnRIYW5kbGVyKHRoaXMubGlzdCwgJ3NwbGljZScsIHRoaXMsIHRoaXMuc3BsaWNlSGFuZGxlcik7XG4gICAgICAgICAgICBldmVudC5hZGRFdmVudEhhbmRsZXIodGhpcy5saXN0LCAncHVzaCcsIHRoaXMsIHRoaXMucHVzaEhhbmRsZXIpO1xuICAgICAgICAgICAgdmFyIGR1bW15TGlzdEZpbHRlciA9IG5ldyBEdW1teUxpc3RGaWx0ZXIoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZG1pbkxpc3QucHVzaCh0aGlzLmNyZWF0ZUFkbWluKHRoaXMubGlzdCwgaSwgZHVtbXlMaXN0RmlsdGVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmxpc3RGaWx0ZXIgPSBuZXcgTGlzdEZpbHRlcih7IGxpc3Q6IHRoaXMubGlzdCwgZmlsdGVyZWRMaXN0OiB0aGlzLnRhcmdldExpc3QsIHZpc2liaWxpdHk6IGR1bW15TGlzdEZpbHRlci52aXNpYmlsaXR5IH0pO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuYWRtaW5MaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFkbWluID0gdGhpcy5hZG1pbkxpc3RbaV07XG4gICAgICAgICAgICAgICAgYWRtaW4ubGlzdEZpbHRlciA9IHRoaXMubGlzdEZpbHRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVBZG1pbjogZnVuY3Rpb24gKGxpc3QsIGluZGV4LCBsaXN0RmlsdGVyKSB7XG4gICAgICAgICAgICB2YXIgYWRtaW4gPSB7XG4gICAgICAgICAgICAgICAgbGlzdDogbGlzdCxcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgICAgICAgICAgbGlzdEZpbHRlcjogbGlzdEZpbHRlcixcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGVkUHJvcGVydHk6IG51bGxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBhZG1pbi5jYWxjdWxhdGVkUHJvcGVydHkgPSBuZXcgQ2FsY3VsYXRlZFByb3BlcnR5KHtcbiAgICAgICAgICAgICAgICBzdGFydDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjYWxjOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihhZG1pbi5saXN0W2FkbWluLmluZGV4XSk7XG4gICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAodmlzaWJpbGl0eSkge1xuICAgICAgICAgICAgICAgICAgICBhZG1pbi5saXN0RmlsdGVyLnNldFZpc2liaWxpdHkoYWRtaW4uaW5kZXgsIHZpc2liaWxpdHkpO1xuICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYWRtaW47XG4gICAgICAgIH0sXG5cbiAgICAgICAgc3BsaWNlSGFuZGxlcjogZnVuY3Rpb24gKHNpZ25hbCwgc3BsaWNlQXJncykge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gc3BsaWNlQXJnc1swXTtcbiAgICAgICAgICAgIHZhciBudW1EZWwgPSBzcGxpY2VBcmdzWzFdO1xuICAgICAgICAgICAgdmFyIGluc2VydEVsZW1lbnRzID0gc3BsaWNlQXJncy5zbGljZSgyKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtRGVsOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgYWRtaW4gPSB0aGlzLmFkbWluTGlzdFtpbmRleCArIGldO1xuICAgICAgICAgICAgICAgIGFkbWluLmNhbGN1bGF0ZWRQcm9wZXJ0eS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgaW5zZXJ0QWRtaW4gPSBbXTtcbiAgICAgICAgICAgIHZhciBkdW1teUxpc3RGaWx0ZXIgPSBuZXcgRHVtbXlMaXN0RmlsdGVyKCk7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaW5zZXJ0RWxlbWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpbnNlcnRBZG1pbi5wdXNoKHRoaXMuY3JlYXRlQWRtaW4oaW5zZXJ0RWxlbWVudHMsIGksIGR1bW15TGlzdEZpbHRlcikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29yZS5zcGxpY2UodGhpcy5hZG1pbkxpc3QsIGluZGV4LCBudW1EZWwsIGluc2VydEFkbWluKTtcbiAgICAgICAgICAgIGZvciAoaSA9IGluZGV4OyBpIDwgaW5kZXggKyBpbnNlcnRFbGVtZW50cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBhZG1pbiA9IHRoaXMuYWRtaW5MaXN0W2ldO1xuICAgICAgICAgICAgICAgIGFkbWluLmxpc3QgPSB0aGlzLmxpc3Q7XG4gICAgICAgICAgICAgICAgYWRtaW4uaW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICBhZG1pbi5saXN0RmlsdGVyID0gdGhpcy5saXN0RmlsdGVyO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGkgPSBpbmRleCArIGluc2VydEVsZW1lbnRzLmxlbmd0aDsgaSA8IHRoaXMuYWRtaW5MaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFkbWluID0gdGhpcy5hZG1pbkxpc3RbaV07XG4gICAgICAgICAgICAgICAgYWRtaW4uaW5kZXggKz0gaW5zZXJ0RWxlbWVudHMubGVuZ3RoIC0gbnVtRGVsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5saXN0RmlsdGVyLnNwbGljZShpbmRleCwgbnVtRGVsLCBpbnNlcnRFbGVtZW50cywgZHVtbXlMaXN0RmlsdGVyLnZpc2liaWxpdHkpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbn0pOyJdfQ==