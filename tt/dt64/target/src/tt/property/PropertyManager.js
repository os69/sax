"use strict";

define(['../../core/core', '../../core/event', '../util', './Property', './CalculatedProperty', './ReducedListProperty'], function (core, event, util, Property, CalculatedProperty, ReducedListProperty) {
  return core.defineClass({
    init: function init(params) {
      this.obj = params.obj;
      this.properties = {};
      event.addModificationHandler(this.obj, this.eventHandlerModificationHandler.bind(this));
    },
    initProperty: function initProperty(propertyName) {
      if (this.properties[propertyName]) {
        return;
      }

      if (!this.obj.__dict) {
        util.decorateProperty(this.obj, propertyName);
      }

      var property = new Property({
        obj: this.obj,
        propertyName: propertyName
      });
      this.properties[propertyName] = property;
      return property;
    },
    createCalculatedProperty: function createCalculatedProperty(params) {
      if (!this.obj.__dict) {
        util.decorateProperty(this.obj, params.propertyName);
      }

      var property;

      switch (params.type) {
        case 'ReducedList':
          property = new ReducedListProperty(core.cloneExtend(params, {
            callback: function (value) {
              util.setProperty(this.obj, params.propertyName, value);
            }.bind(this)
          }));
          break;

        default:
          property = new CalculatedProperty(core.cloneExtend(params, {
            callback: function (value) {
              util.setProperty(this.obj, params.propertyName, value);
            }.bind(this)
          }));
      }

      this.properties[params.propertyName] = property;
      return property;
    },
    eventHandlerModificationHandler: function eventHandlerModificationHandler(action, sender, signal, receiver, handler) {
      if (sender !== this.obj) {
        return;
      }

      var propertyName = util.propertyName(signal);

      if (!propertyName) {
        return;
      }

      var property = this.properties[propertyName];

      if (!property) {
        return;
      }

      var methodType = util.methodType(signal);

      if (methodType !== 'set') {
        return;
      }

      switch (action) {
        case 'add':
          property.incUsage();
          break;

        case 'remove':
          property.decUsage();
          break;
      }
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90dC9wcm9wZXJ0eS9Qcm9wZXJ0eU1hbmFnZXIuanMiXSwibmFtZXMiOlsiZGVmaW5lIiwiY29yZSIsImV2ZW50IiwidXRpbCIsIlByb3BlcnR5IiwiQ2FsY3VsYXRlZFByb3BlcnR5IiwiUmVkdWNlZExpc3RQcm9wZXJ0eSIsImRlZmluZUNsYXNzIiwiaW5pdCIsInBhcmFtcyIsIm9iaiIsInByb3BlcnRpZXMiLCJhZGRNb2RpZmljYXRpb25IYW5kbGVyIiwiZXZlbnRIYW5kbGVyTW9kaWZpY2F0aW9uSGFuZGxlciIsImJpbmQiLCJpbml0UHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJfX2RpY3QiLCJkZWNvcmF0ZVByb3BlcnR5IiwicHJvcGVydHkiLCJjcmVhdGVDYWxjdWxhdGVkUHJvcGVydHkiLCJ0eXBlIiwiY2xvbmVFeHRlbmQiLCJjYWxsYmFjayIsInZhbHVlIiwic2V0UHJvcGVydHkiLCJhY3Rpb24iLCJzZW5kZXIiLCJzaWduYWwiLCJyZWNlaXZlciIsImhhbmRsZXIiLCJtZXRob2RUeXBlIiwiaW5jVXNhZ2UiLCJkZWNVc2FnZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsTUFBTSxDQUFDLENBQUMsaUJBQUQsRUFBb0Isa0JBQXBCLEVBQXdDLFNBQXhDLEVBQW1ELFlBQW5ELEVBQWlFLHNCQUFqRSxFQUF5Rix1QkFBekYsQ0FBRCxFQUFvSCxVQUFVQyxJQUFWLEVBQWdCQyxLQUFoQixFQUF1QkMsSUFBdkIsRUFBNkJDLFFBQTdCLEVBQXVDQyxrQkFBdkMsRUFBMkRDLG1CQUEzRCxFQUFnRjtBQUV0TSxTQUFPTCxJQUFJLENBQUNNLFdBQUwsQ0FBaUI7QUFFcEJDLElBQUFBLElBQUksRUFBRSxjQUFVQyxNQUFWLEVBQWtCO0FBQ3BCLFdBQUtDLEdBQUwsR0FBV0QsTUFBTSxDQUFDQyxHQUFsQjtBQUNBLFdBQUtDLFVBQUwsR0FBa0IsRUFBbEI7QUFDQVQsTUFBQUEsS0FBSyxDQUFDVSxzQkFBTixDQUE2QixLQUFLRixH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QUFLLFFBQUw7QUFDSWIsVUFBQUEsUUFBUSxDQUFDYyxRQUFUO0FBQ0E7QUFOUjtBQVFIO0FBdkVtQixHQUFqQixDQUFQO0FBMkVILENBN0VLLENBQU4iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi8uLi9jb3JlL2NvcmUnLCAnLi4vLi4vY29yZS9ldmVudCcsICcuLi91dGlsJywgJy4vUHJvcGVydHknLCAnLi9DYWxjdWxhdGVkUHJvcGVydHknLCAnLi9SZWR1Y2VkTGlzdFByb3BlcnR5J10sIGZ1bmN0aW9uIChjb3JlLCBldmVudCwgdXRpbCwgUHJvcGVydHksIENhbGN1bGF0ZWRQcm9wZXJ0eSwgUmVkdWNlZExpc3RQcm9wZXJ0eSkge1xuXG4gICAgcmV0dXJuIGNvcmUuZGVmaW5lQ2xhc3Moe1xuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMub2JqID0gcGFyYW1zLm9iajtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgZXZlbnQuYWRkTW9kaWZpY2F0aW9uSGFuZGxlcih0aGlzLm9iaiwgdGhpcy5ldmVudEhhbmRsZXJNb2RpZmljYXRpb25IYW5kbGVyLmJpbmQodGhpcykpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluaXRQcm9wZXJ0eTogZnVuY3Rpb24gKHByb3BlcnR5TmFtZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLm9iai5fX2RpY3QpIHtcbiAgICAgICAgICAgICAgICB1dGlsLmRlY29yYXRlUHJvcGVydHkodGhpcy5vYmosIHByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBuZXcgUHJvcGVydHkoe1xuICAgICAgICAgICAgICAgIG9iajogdGhpcy5vYmosXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdID0gcHJvcGVydHk7XG4gICAgICAgICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY3JlYXRlQ2FsY3VsYXRlZFByb3BlcnR5OiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMub2JqLl9fZGljdCkge1xuICAgICAgICAgICAgICAgIHV0aWwuZGVjb3JhdGVQcm9wZXJ0eSh0aGlzLm9iaiwgcGFyYW1zLnByb3BlcnR5TmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvcGVydHk7XG4gICAgICAgICAgICBzd2l0Y2ggKHBhcmFtcy50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnUmVkdWNlZExpc3QnOlxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBuZXcgUmVkdWNlZExpc3RQcm9wZXJ0eShjb3JlLmNsb25lRXh0ZW5kKHBhcmFtcywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5zZXRQcm9wZXJ0eSh0aGlzLm9iaiwgcGFyYW1zLnByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpOyAgICBcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkgPSBuZXcgQ2FsY3VsYXRlZFByb3BlcnR5KGNvcmUuY2xvbmVFeHRlbmQocGFyYW1zLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5zZXRQcm9wZXJ0eSh0aGlzLm9iaiwgcGFyYW1zLnByb3BlcnR5TmFtZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucHJvcGVydGllc1twYXJhbXMucHJvcGVydHlOYW1lXSA9IHByb3BlcnR5O1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgICAgICB9LFxuXG4gICAgICAgIGV2ZW50SGFuZGxlck1vZGlmaWNhdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChhY3Rpb24sIHNlbmRlciwgc2lnbmFsLCByZWNlaXZlciwgaGFuZGxlcikge1xuICAgICAgICAgICAgaWYgKHNlbmRlciAhPT0gdGhpcy5vYmopIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgcHJvcGVydHlOYW1lID0gdXRpbC5wcm9wZXJ0eU5hbWUoc2lnbmFsKTtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHlOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHByb3BlcnR5ID0gdGhpcy5wcm9wZXJ0aWVzW3Byb3BlcnR5TmFtZV07XG4gICAgICAgICAgICBpZiAoIXByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIG1ldGhvZFR5cGUgPSB1dGlsLm1ldGhvZFR5cGUoc2lnbmFsKTtcbiAgICAgICAgICAgIGlmIChtZXRob2RUeXBlICE9PSAnc2V0Jykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuaW5jVXNhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHkuZGVjVXNhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgIH0pO1xuXG59KTsiXX0=