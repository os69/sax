"use strict";

define(['../../core/core', '../../core/event', '../util', './PropertyManager', '../list/initList'], function (core, event, util, PropertyManager, initList) {
  var module = {};

  module.initProperty = function (obj, propertyName) {
    module._initObject(obj);

    event.getEventData(obj).propertyManager.initProperty(propertyName);
  };

  module.createCalculatedProperty = function (obj, propertyName, calc) {
    module._initObject(obj);

    event.getEventData(obj).propertyManager.createCalculatedProperty({
      propertyName: propertyName,
      calc: calc
    });
  };

  module.createReducedListProperty = function (obj, propertyName, list, reducer, startValue) {
    module._initObject(obj);

    initList.initList(list);
    event.getEventData(obj).propertyManager.createCalculatedProperty({
      propertyName: propertyName,
      list: list,
      reducer: reducer,
      startValue: startValue,
      type: 'ReducedList'
    });
  };

  module._initObject = function (obj) {
    var eventData = event.getEventData(obj);

    if (eventData.propertyManager) {
      return;
    }

    eventData.propertyManager = new PropertyManager({
      obj: obj
    });
  };

  var PropertyObserver = core.defineClass({
    init: function init(params) {
      event.addEventHandler(params.obj, util.methodName('set', params.propertyName), this, this.changed);
    },
    changed: function changed() {// console.log(arguments[0], ':', arguments[1]);
    },
    delete: function _delete() {
      event.delete(this);
    }
  });
  module.getProperty = util.getProperty;
  module.setProperty = util.setProperty;

  module.createPropertyObserver = function (obj, propertyName) {
    return new PropertyObserver({
      obj: obj,
      propertyName: propertyName
    });
  };

  return module;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90dC9wcm9wZXJ0eS9pbmRleC5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJjb3JlIiwiZXZlbnQiLCJ1dGlsIiwiUHJvcGVydHlNYW5hZ2VyIiwiaW5pdExpc3QiLCJtb2R1bGUiLCJpbml0UHJvcGVydHkiLCJvYmoiLCJwcm9wZXJ0eU5hbWUiLCJfaW5pdE9iamVjdCIsImdldEV2ZW50RGF0YSIsInByb3BlcnR5TWFuYWdlciIsImNyZWF0ZUNhbGN1bGF0ZWRQcm9wZXJ0eSIsImNhbGMiLCJjcmVhdGVSZWR1Y2VkTGlzdFByb3BlcnR5IiwibGlzdCIsInJlZHVjZXIiLCJzdGFydFZhbHVlIiwidHlwZSIsImV2ZW50RGF0YSIsIlByb3BlcnR5T2JzZXJ2ZXIiLCJkZWZpbmVDbGFzcyIsImluaXQiLCJwYXJhbXMiLCJhZGRFdmVudEhhbmRsZXIiLCJtZXRob2ROYW1lIiwiY2hhbmdlZCIsImRlbGV0ZSIsImdldFByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJjcmVhdGVQcm9wZXJ0eU9ic2VydmVyIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUMsQ0FBQyxpQkFBRCxFQUFvQixrQkFBcEIsRUFBd0MsU0FBeEMsRUFBbUQsbUJBQW5ELEVBQXdFLGtCQUF4RSxDQUFELEVBQThGLFVBQVVDLElBQVYsRUFBZ0JDLEtBQWhCLEVBQXVCQyxJQUF2QixFQUE2QkMsZUFBN0IsRUFBOENDLFFBQTlDLEVBQXdEO0FBRXhKLE1BQUlDLE1BQU0sR0FBRyxFQUFiOztBQUVBQSxFQUFBQSxNQUFNLENBQUNDLFlBQVAsR0FBc0IsVUFBVUMsR0FBVixFQUFlQyxZQUFmLEVBQTZCO0FBQy9DSCxJQUFBQSxNQUFNLENBQUNJLFdBQVAsQ0FBbUJGLEdBQW5COztBQUNBTixJQUFBQSxLQUFLLENBQUNTLFlBQU4sQ0FBbUJILEdBQW5CLEVBQXdCSSxlQUF4QixDQUF3Q0wsWUFBeEMsQ0FBcURFLFlBQXJEO0FBQ0gsR0FIRDs7QUFLQUgsRUFBQUEsTUFBTSxDQUFDTyx3QkFBUCxHQUFrQyxVQUFVTCxHQUFWLEVBQWVDLFlBQWYsRUFBNkJLLElBQTdCLEVBQW1DO0FBQ2pFUixJQUFBQSxNQUFNLENBQUNJLFdBQVAsQ0FBbUJGLEdBQW5COztBQUNBTixJQUFBQSxLQUFLLENBQUNTLFlBQU4sQ0FBbUJILEdBQW5CLEVBQXdCSSxlQUF4QixDQUF3Q0Msd0JBQXhDLENBQWlFO0FBQUVKLE1BQUFBLFlBQVksRUFBRUEsWUFBaEI7QUFBOEJLLE1BQUFBLElBQUksRUFBRUE7QUFBcEMsS0FBakU7QUFDSCxHQUhEOztBQUtBUixFQUFBQSxNQUFNLENBQUNTLHlCQUFQLEdBQW1DLFVBQVVQLEdBQVYsRUFBZUMsWUFBZixFQUE2Qk8sSUFBN0IsRUFBbUNDLE9BQW5DLEVBQTRDQyxVQUE1QyxFQUF3RDtBQUN2RlosSUFBQUEsTUFBTSxDQUFDSSxXQUFQLENBQW1CRixHQUFuQjs7QUFDQUgsSUFBQUEsUUFBUSxDQUFDQSxRQUFULENBQWtCVyxJQUFsQjtBQUNBZCxJQUFBQSxLQUFLLENBQUNTLFlBQU4sQ0FBbUJILEdBQW5CLEVBQXdCSSxlQUF4QixDQUF3Q0Msd0JBQXhDLENBQWlFO0FBQUVKLE1BQUFBLFlBQVksRUFBRUEsWUFBaEI7QUFBOEJPLE1BQUFBLElBQUksRUFBRUEsSUFBcEM7QUFBMENDLE1BQUFBLE9BQU8sRUFBRUEsT0FBbkQ7QUFBNERDLE1BQUFBLFVBQVUsRUFBRUEsVUFBeEU7QUFBb0ZDLE1BQUFBLElBQUksRUFBRTtBQUExRixLQUFqRTtBQUNILEdBSkQ7O0FBTUFiLEVBQUFBLE1BQU0sQ0FBQ0ksV0FBUCxHQUFxQixVQUFVRixHQUFWLEVBQWU7QUFDaEMsUUFBSVksU0FBUyxHQUFHbEIsS0FBSyxDQUFDUyxZQUFOLENBQW1CSCxHQUFuQixDQUFoQjs7QUFDQSxRQUFJWSxTQUFTLENBQUNSLGVBQWQsRUFBK0I7QUFDM0I7QUFDSDs7QUFDRFEsSUFBQUEsU0FBUyxDQUFDUixlQUFWLEdBQTRCLElBQUlSLGVBQUosQ0FBb0I7QUFBRUksTUFBQUEsR0FBRyxFQUFFQTtBQUFQLEtBQXBCLENBQTVCO0FBQ0gsR0FORDs7QUFRQSxNQUFJYSxnQkFBZ0IsR0FBR3BCLElBQUksQ0FBQ3FCLFdBQUwsQ0FBaUI7QUFDcENDLElBQUFBLElBQUksRUFBRSxjQUFVQyxNQUFWLEVBQWtCO0FBQ3BCdEIsTUFBQUEsS0FBSyxDQUFDdUIsZUFBTixDQUFzQkQsTUFBTSxDQUFDaEIsR0FBN0IsRUFBa0NMLElBQUksQ0FBQ3VCLFVBQUwsQ0FBZ0IsS0FBaEIsRUFBdUJGLE1BQU0sQ0FBQ2YsWUFBOUIsQ0FBbEMsRUFBK0UsSUFBL0UsRUFBcUYsS0FBS2tCLE9BQTFGO0FBQ0gsS0FIbUM7QUFJcENBLElBQUFBLE9BQU8sRUFBRSxtQkFBWSxDQUNsQjtBQUNGLEtBTm1DO0FBT3BDQyxJQUFBQSxNQUFNLEVBQUUsbUJBQVk7QUFDaEIxQixNQUFBQSxLQUFLLENBQUMwQixNQUFOLENBQWEsSUFBYjtBQUNIO0FBVG1DLEdBQWpCLENBQXZCO0FBWUF0QixFQUFBQSxNQUFNLENBQUN1QixXQUFQLEdBQXFCMUIsSUFBSSxDQUFDMEIsV0FBMUI7QUFDQXZCLEVBQUFBLE1BQU0sQ0FBQ3dCLFdBQVAsR0FBcUIzQixJQUFJLENBQUMyQixXQUExQjs7QUFFQXhCLEVBQUFBLE1BQU0sQ0FBQ3lCLHNCQUFQLEdBQWdDLFVBQVV2QixHQUFWLEVBQWVDLFlBQWYsRUFBNkI7QUFDekQsV0FBTyxJQUFJWSxnQkFBSixDQUFxQjtBQUFFYixNQUFBQSxHQUFHLEVBQUVBLEdBQVA7QUFBWUMsTUFBQUEsWUFBWSxFQUFFQTtBQUExQixLQUFyQixDQUFQO0FBQ0gsR0FGRDs7QUFJQSxTQUFPSCxNQUFQO0FBRUgsQ0FqREssQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uLy4uL2NvcmUvY29yZScsICcuLi8uLi9jb3JlL2V2ZW50JywgJy4uL3V0aWwnLCAnLi9Qcm9wZXJ0eU1hbmFnZXInLCAnLi4vbGlzdC9pbml0TGlzdCddLCBmdW5jdGlvbiAoY29yZSwgZXZlbnQsIHV0aWwsIFByb3BlcnR5TWFuYWdlciwgaW5pdExpc3QpIHtcblxuICAgIHZhciBtb2R1bGUgPSB7fTtcblxuICAgIG1vZHVsZS5pbml0UHJvcGVydHkgPSBmdW5jdGlvbiAob2JqLCBwcm9wZXJ0eU5hbWUpIHtcbiAgICAgICAgbW9kdWxlLl9pbml0T2JqZWN0KG9iaik7XG4gICAgICAgIGV2ZW50LmdldEV2ZW50RGF0YShvYmopLnByb3BlcnR5TWFuYWdlci5pbml0UHJvcGVydHkocHJvcGVydHlOYW1lKTtcbiAgICB9O1xuXG4gICAgbW9kdWxlLmNyZWF0ZUNhbGN1bGF0ZWRQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3BlcnR5TmFtZSwgY2FsYykge1xuICAgICAgICBtb2R1bGUuX2luaXRPYmplY3Qob2JqKTtcbiAgICAgICAgZXZlbnQuZ2V0RXZlbnREYXRhKG9iaikucHJvcGVydHlNYW5hZ2VyLmNyZWF0ZUNhbGN1bGF0ZWRQcm9wZXJ0eSh7IHByb3BlcnR5TmFtZTogcHJvcGVydHlOYW1lLCBjYWxjOiBjYWxjIH0pO1xuICAgIH07XG5cbiAgICBtb2R1bGUuY3JlYXRlUmVkdWNlZExpc3RQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmosIHByb3BlcnR5TmFtZSwgbGlzdCwgcmVkdWNlciwgc3RhcnRWYWx1ZSkge1xuICAgICAgICBtb2R1bGUuX2luaXRPYmplY3Qob2JqKTtcbiAgICAgICAgaW5pdExpc3QuaW5pdExpc3QobGlzdCk7XG4gICAgICAgIGV2ZW50LmdldEV2ZW50RGF0YShvYmopLnByb3BlcnR5TWFuYWdlci5jcmVhdGVDYWxjdWxhdGVkUHJvcGVydHkoeyBwcm9wZXJ0eU5hbWU6IHByb3BlcnR5TmFtZSwgbGlzdDogbGlzdCwgcmVkdWNlcjogcmVkdWNlciwgc3RhcnRWYWx1ZTogc3RhcnRWYWx1ZSwgdHlwZTogJ1JlZHVjZWRMaXN0JyB9KTtcbiAgICB9O1xuXG4gICAgbW9kdWxlLl9pbml0T2JqZWN0ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB2YXIgZXZlbnREYXRhID0gZXZlbnQuZ2V0RXZlbnREYXRhKG9iaik7XG4gICAgICAgIGlmIChldmVudERhdGEucHJvcGVydHlNYW5hZ2VyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXZlbnREYXRhLnByb3BlcnR5TWFuYWdlciA9IG5ldyBQcm9wZXJ0eU1hbmFnZXIoeyBvYmo6IG9iaiB9KTtcbiAgICB9O1xuXG4gICAgdmFyIFByb3BlcnR5T2JzZXJ2ZXIgPSBjb3JlLmRlZmluZUNsYXNzKHtcbiAgICAgICAgaW5pdDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgZXZlbnQuYWRkRXZlbnRIYW5kbGVyKHBhcmFtcy5vYmosIHV0aWwubWV0aG9kTmFtZSgnc2V0JywgcGFyYW1zLnByb3BlcnR5TmFtZSksIHRoaXMsIHRoaXMuY2hhbmdlZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNoYW5nZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgLy8gY29uc29sZS5sb2coYXJndW1lbnRzWzBdLCAnOicsIGFyZ3VtZW50c1sxXSk7XG4gICAgICAgIH0sXG4gICAgICAgIGRlbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZXZlbnQuZGVsZXRlKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBtb2R1bGUuZ2V0UHJvcGVydHkgPSB1dGlsLmdldFByb3BlcnR5O1xuICAgIG1vZHVsZS5zZXRQcm9wZXJ0eSA9IHV0aWwuc2V0UHJvcGVydHk7XG5cbiAgICBtb2R1bGUuY3JlYXRlUHJvcGVydHlPYnNlcnZlciA9IGZ1bmN0aW9uIChvYmosIHByb3BlcnR5TmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb3BlcnR5T2JzZXJ2ZXIoeyBvYmo6IG9iaiwgcHJvcGVydHlOYW1lOiBwcm9wZXJ0eU5hbWUgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vZHVsZTtcblxufSk7Il19