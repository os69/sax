"use strict";

define(['../src/index'], function (tt) {
  var testCases = {}; // =======================================================================
  // events 1
  // =======================================================================

  testCases.events1 = {
    label: 'Events 1',
    execute: function execute(ctx) {
      var count = 0;
      var a = {
        name: 'a'
      };
      var b = {
        name: 'b',
        handler: function handler(signal, message) {
          count++;
        }
      };
      var numberHandlers = tt.event.getNumberHandlers();
      tt.event.addEventHandler(a, 'hello', b, b.handler);
      ctx.assertEquals(count, 0, 'call check');
      tt.event.raiseEvent(a, 'hello', 13);
      ctx.assertEquals(count, 1, 'call check');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).sendersMap), 'a senders empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(a).receiversMap), 'a receivers not empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(a).receiverObjectManager.objMap), 'a receiver object manager is not empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).senderObjectManager.objMap), 'a sender object manager is empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(b).sendersMap), 'b senders not empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiversMap), 'b receivers empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiverObjectManager.objMap), 'b receiver object manager is empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(b).senderObjectManager.objMap), 'b sender object manager is not empty');
      tt.event.delete(a);
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).sendersMap), 'a senders empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).receiversMap), 'a receivers empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).receiverObjectManager.objMap), 'a receiver object manager is empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).senderObjectManager.objMap), 'a sender object manager is empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).sendersMap), 'b senders empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiversMap), 'b receivers empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiverObjectManager.objMap), 'b receiver object manager is empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).senderObjectManager.objMap), 'b sender object manager is empty');
      ctx.assertEquals(tt.event.getNumberHandlers(), numberHandlers, 'handler exit count');
    }
  }; // =======================================================================
  // events 2
  // =======================================================================

  testCases.events2 = {
    label: 'Events 2',
    execute: function execute(ctx) {
      var count = 0;
      var a = {
        name: 'a'
      };
      var b = {
        name: 'b',
        handler: function handler(signal, message) {
          count++;
        }
      };
      tt.event.addEventHandler(a, 'hello', b, b.handler);
      ctx.assertEquals(count, 0, 'call check');
      tt.event.raiseEvent(a, 'hello', 13);
      ctx.assertEquals(count, 1, 'call check');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).sendersMap), 'a senders empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(a).receiversMap), 'a receivers not empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(a).receiverObjectManager.objMap), 'a receiver object manager is not empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).senderObjectManager.objMap), 'a sender object manager is empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(b).sendersMap), 'b senders not empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiversMap), 'b receivers empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiverObjectManager.objMap), 'b receiver object manager is empty');
      ctx.assert(!tt.core.isEmpty(tt.event.getEventData(b).senderObjectManager.objMap), 'b sender object manager is not empty');
      tt.event.delete(b);
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).sendersMap), 'a senders empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).receiversMap), 'a receivers empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).receiverObjectManager.objMap), 'a receiver object manager is empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(a).senderObjectManager.objMap), 'a sender object manager is empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).sendersMap), 'b senders empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiversMap), 'b receivers empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).receiverObjectManager.objMap), 'b receiver object manager is empty');
      ctx.assert(tt.core.isEmpty(tt.event.getEventData(b).senderObjectManager.objMap), 'b sender object manager is empty');
    }
  };
  return testCases;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvdGVzdEV2ZW50cy5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJ0dCIsInRlc3RDYXNlcyIsImV2ZW50czEiLCJsYWJlbCIsImV4ZWN1dGUiLCJjdHgiLCJjb3VudCIsImEiLCJuYW1lIiwiYiIsImhhbmRsZXIiLCJzaWduYWwiLCJtZXNzYWdlIiwibnVtYmVySGFuZGxlcnMiLCJldmVudCIsImdldE51bWJlckhhbmRsZXJzIiwiYWRkRXZlbnRIYW5kbGVyIiwiYXNzZXJ0RXF1YWxzIiwicmFpc2VFdmVudCIsImFzc2VydCIsImNvcmUiLCJpc0VtcHR5IiwiZ2V0RXZlbnREYXRhIiwic2VuZGVyc01hcCIsInJlY2VpdmVyc01hcCIsInJlY2VpdmVyT2JqZWN0TWFuYWdlciIsIm9iak1hcCIsInNlbmRlck9iamVjdE1hbmFnZXIiLCJkZWxldGUiLCJldmVudHMyIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUMsQ0FBQyxjQUFELENBQUQsRUFBbUIsVUFBVUMsRUFBVixFQUFjO0FBRW5DLE1BQUlDLFNBQVMsR0FBRyxFQUFoQixDQUZtQyxDQUluQztBQUNBO0FBQ0E7O0FBRUFBLEVBQUFBLFNBQVMsQ0FBQ0MsT0FBVixHQUFvQjtBQUNoQkMsSUFBQUEsS0FBSyxFQUFFLFVBRFM7QUFFaEJDLElBQUFBLE9BQU8sRUFBRSxpQkFBVUMsR0FBVixFQUFlO0FBRXBCLFVBQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsVUFBSUMsQ0FBQyxHQUFHO0FBQ0pDLFFBQUFBLElBQUksRUFBRTtBQURGLE9BQVI7QUFJQSxVQUFJQyxDQUFDLEdBQUc7QUFDSkQsUUFBQUEsSUFBSSxFQUFFLEdBREY7QUFFSkUsUUFBQUEsT0FBTyxFQUFFLGlCQUFVQyxNQUFWLEVBQWtCQyxPQUFsQixFQUEyQjtBQUNoQ04sVUFBQUEsS0FBSztBQUNSO0FBSkcsT0FBUjtBQU9BLFVBQUlPLGNBQWMsR0FBR2IsRUFBRSxDQUFDYyxLQUFILENBQVNDLGlCQUFULEVBQXJCO0FB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ekIsQ0FBNkNELE1BQTdELENBQVgsRUFBaUYsa0NBQWpGO0FBQ0FyQixNQUFBQSxHQUFHLENBQUNjLE1BQUosQ0FBV25CLEVBQUUsQ0FBQ29CLElBQUgsQ0FBUUMsT0FBUixDQUFnQnJCLEVBQUUsQ0FBQ2MsS0FBSCxDQUFTUSxZQUFULENBQXNCYixDQUF0QixFQUF5QmMsVUFBekMsQ0FBWCxFQUFpRSxpQkFBakU7QUFDQWxCLE1BQUFBLEdBQUcsQ0FBQ2MsTUFBSixDQUFXbkIsRUFBRSxDQUFDb0IsSUFBSCxDQUFRQyxPQUFSLENBQWdCckIsRUFBRSxDQUFDYyxLQUFILENBQVNRLFlBQVQsQ0FBc0JiLENBQXRCLEVBQXlCZSxZQUF6QyxDQUFYLEVBQW1FLG1CQUFuRTtBQUNBbkIsTUFBQUEsR0FBRyxDQUFDYyxNQUFKLENBQVduQixFQUFFLENBQUNvQixJQUFILENBQVFDLE9BQVIsQ0FBZ0JyQixFQUFFLENBQUNjLEtBQUgsQ0FBU1EsWUFBVCxDQUFzQmIsQ0FBdEIsRUFBeUJnQixxQkFBekIsQ0FBK0NDLE1BQS9ELENBQVgsRUFBbUYsb0NBQW5GO0FBQ0FyQixNQUFBQSxHQUFHLENBQUNjLE1BQUosQ0FBV25CLEVBQUUsQ0FBQ29CLElBQUgsQ0FBUUMsT0FBUixDQUFnQnJCLEVBQUUsQ0FBQ2MsS0FBSCxDQUFTUSxZQUFULENBQXNCYixDQUF0QixFQUF5QmtCLG1CQUF6QixDQUE2Q0QsTUFBN0QsQ0FBWCxFQUFpRixrQ0FBakY7QUFFSDtBQXpDZSxHQUFwQjtBQTRDQSxTQUFPekIsU0FBUDtBQUNILENBekdLLENBQU4iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi9zcmMvaW5kZXgnXSwgZnVuY3Rpb24gKHR0KSB7XG5cbiAgICB2YXIgdGVzdENhc2VzID0ge307XG5cbiAgICAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIC8vIGV2ZW50cyAxXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuICAgIHRlc3RDYXNlcy5ldmVudHMxID0ge1xuICAgICAgICBsYWJlbDogJ0V2ZW50cyAxJyxcbiAgICAgICAgZXhlY3V0ZTogZnVuY3Rpb24gKGN0eCkge1xuXG4gICAgICAgICAgICB2YXIgY291bnQgPSAwO1xuICAgICAgICAgICAgdmFyIGEgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2EnXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgYiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiAnYicsXG4gICAgICAgICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKHNpZ25hbCwgbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBudW1iZXJIYW5kbGVycyA9IHR0LmV2ZW50LmdldE51bWJlckhhbmRsZXJzKCk7XG5cbiAgICAgICAgICAgIHR0LmV2ZW50LmFkZEV2ZW50SGFuZGxlcihhLCAnaGVsbG8nLCBiLCBiLmhhbmRsZXIpO1xuICAgICAgICAgICAgY3R4LmFzc2VydEVxdWFscyhjb3VudCwgMCwgJ2NhbGwgY2hlY2snKTtcbiAgICAgICAgICAgIHR0LmV2ZW50LnJhaXNlRXZlbnQoYSwgJ2hlbGxvJywgMTMpO1xuICAgICAgICAgICAgY3R4LmFzc2VydEVxdWFscyhjb3VudCwgMSwgJ2NhbGwgY2hlY2snKTtcblxuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGEpLnNlbmRlcnNNYXApLCAnYSBzZW5kZXJzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KCF0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGEpLnJlY2VpdmVyc01hcCksICdhIHJlY2VpdmVycyBub3QgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQoIXR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYSkucmVjZWl2ZXJPYmplY3RNYW5hZ2VyLm9iak1hcCksICdhIHJlY2VpdmVyIG9iamVjdCBtYW5hZ2VyIGlzIG5vdCBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGEpLnNlbmRlck9iamVjdE1hbmFnZXIub2JqTWFwKSwgJ2Egc2VuZGVyIG9iamVjdCBtYW5hZ2VyIGlzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KCF0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnNlbmRlcnNNYXApLCAnYiBzZW5kZXJzIG5vdCBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnJlY2VpdmVyc01hcCksICdiIHJlY2VpdmVycyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnJlY2VpdmVyT2JqZWN0TWFuYWdlci5vYmpNYXApLCAnYiByZWNlaXZlciBvYmplY3QgbWFuYWdlciBpcyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCghdHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShiKS5zZW5kZXJPYmplY3RNYW5hZ2VyLm9iak1hcCksICdiIHNlbmRlciBvYmplY3QgbWFuYWdlciBpcyBub3QgZW1wdHknKTtcblxuICAgICAgICAgICAgdHQuZXZlbnQuZGVsZXRlKGEpO1xuXG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYSkuc2VuZGVyc01hcCksICdhIHNlbmRlcnMgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShhKS5yZWNlaXZlcnNNYXApLCAnYSByZWNlaXZlcnMgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShhKS5yZWNlaXZlck9iamVjdE1hbmFnZXIub2JqTWFwKSwgJ2EgcmVjZWl2ZXIgb2JqZWN0IG1hbmFnZXIgaXMgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShhKS5zZW5kZXJPYmplY3RNYW5hZ2VyLm9iak1hcCksICdhIHNlbmRlciBvYmplY3QgbWFuYWdlciBpcyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnNlbmRlcnNNYXApLCAnYiBzZW5kZXJzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYikucmVjZWl2ZXJzTWFwKSwgJ2IgcmVjZWl2ZXJzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYikucmVjZWl2ZXJPYmplY3RNYW5hZ2VyLm9iak1hcCksICdiIHJlY2VpdmVyIG9iamVjdCBtYW5hZ2VyIGlzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYikuc2VuZGVyT2JqZWN0TWFuYWdlci5vYmpNYXApLCAnYiBzZW5kZXIgb2JqZWN0IG1hbmFnZXIgaXMgZW1wdHknKTtcblxuICAgICAgICAgICAgY3R4LmFzc2VydEVxdWFscyh0dC5ldmVudC5nZXROdW1iZXJIYW5kbGVycygpLCBudW1iZXJIYW5kbGVycywgJ2hhbmRsZXIgZXhpdCBjb3VudCcpO1xuXG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAvLyBldmVudHMgMlxuICAgIC8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiAgICB0ZXN0Q2FzZXMuZXZlbnRzMiA9IHtcbiAgICAgICAgbGFiZWw6ICdFdmVudHMgMicsXG4gICAgICAgIGV4ZWN1dGU6IGZ1bmN0aW9uIChjdHgpIHtcblxuICAgICAgICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgICAgICAgIHZhciBhID0ge1xuICAgICAgICAgICAgICAgIG5hbWU6ICdhJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIGIgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogJ2InLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIChzaWduYWwsIG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0dC5ldmVudC5hZGRFdmVudEhhbmRsZXIoYSwgJ2hlbGxvJywgYiwgYi5oYW5kbGVyKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnRFcXVhbHMoY291bnQsIDAsICdjYWxsIGNoZWNrJyk7XG4gICAgICAgICAgICB0dC5ldmVudC5yYWlzZUV2ZW50KGEsICdoZWxsbycsIDEzKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnRFcXVhbHMoY291bnQsIDEsICdjYWxsIGNoZWNrJyk7XG5cbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShhKS5zZW5kZXJzTWFwKSwgJ2Egc2VuZGVycyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCghdHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShhKS5yZWNlaXZlcnNNYXApLCAnYSByZWNlaXZlcnMgbm90IGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KCF0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGEpLnJlY2VpdmVyT2JqZWN0TWFuYWdlci5vYmpNYXApLCAnYSByZWNlaXZlciBvYmplY3QgbWFuYWdlciBpcyBub3QgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShhKS5zZW5kZXJPYmplY3RNYW5hZ2VyLm9iak1hcCksICdhIHNlbmRlciBvYmplY3QgbWFuYWdlciBpcyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCghdHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShiKS5zZW5kZXJzTWFwKSwgJ2Igc2VuZGVycyBub3QgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShiKS5yZWNlaXZlcnNNYXApLCAnYiByZWNlaXZlcnMgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShiKS5yZWNlaXZlck9iamVjdE1hbmFnZXIub2JqTWFwKSwgJ2IgcmVjZWl2ZXIgb2JqZWN0IG1hbmFnZXIgaXMgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQoIXR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYikuc2VuZGVyT2JqZWN0TWFuYWdlci5vYmpNYXApLCAnYiBzZW5kZXIgb2JqZWN0IG1hbmFnZXIgaXMgbm90IGVtcHR5Jyk7XG5cbiAgICAgICAgICAgIHR0LmV2ZW50LmRlbGV0ZShiKTtcblxuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGEpLnNlbmRlcnNNYXApLCAnYSBzZW5kZXJzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYSkucmVjZWl2ZXJzTWFwKSwgJ2EgcmVjZWl2ZXJzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYSkucmVjZWl2ZXJPYmplY3RNYW5hZ2VyLm9iak1hcCksICdhIHJlY2VpdmVyIG9iamVjdCBtYW5hZ2VyIGlzIGVtcHR5Jyk7XG4gICAgICAgICAgICBjdHguYXNzZXJ0KHR0LmNvcmUuaXNFbXB0eSh0dC5ldmVudC5nZXRFdmVudERhdGEoYSkuc2VuZGVyT2JqZWN0TWFuYWdlci5vYmpNYXApLCAnYSBzZW5kZXIgb2JqZWN0IG1hbmFnZXIgaXMgZW1wdHknKTtcbiAgICAgICAgICAgIGN0eC5hc3NlcnQodHQuY29yZS5pc0VtcHR5KHR0LmV2ZW50LmdldEV2ZW50RGF0YShiKS5zZW5kZXJzTWFwKSwgJ2Igc2VuZGVycyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnJlY2VpdmVyc01hcCksICdiIHJlY2VpdmVycyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnJlY2VpdmVyT2JqZWN0TWFuYWdlci5vYmpNYXApLCAnYiByZWNlaXZlciBvYmplY3QgbWFuYWdlciBpcyBlbXB0eScpO1xuICAgICAgICAgICAgY3R4LmFzc2VydCh0dC5jb3JlLmlzRW1wdHkodHQuZXZlbnQuZ2V0RXZlbnREYXRhKGIpLnNlbmRlck9iamVjdE1hbmFnZXIub2JqTWFwKSwgJ2Igc2VuZGVyIG9iamVjdCBtYW5hZ2VyIGlzIGVtcHR5Jyk7XG5cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gdGVzdENhc2VzO1xufSk7XG5cblxuXG5cbiJdfQ==