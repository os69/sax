"use strict";

define(['../../../src/index', './Root', './ExerciseBasic', './ExerciseCollection', './WorkoutBasic', './WorkoutCollection', './WorkoutItem', './WorkoutItemCollection', './MovementBasic', './MovementCollection', './MuscleBasic', './MuscleCollection'], function (tt, Root, ExerciseBasic, ExerciseCollection, WorkoutBasic, WorkoutCollection, WorkoutItem, WorkoutItemCollection, MovementBasic, MovementCollection, MuscleBasic, MuscleCollection) {
  var classes = {
    Root: {
      cls: Root
    },
    ExerciseBasic: {
      cls: ExerciseBasic
    },
    ExerciseCollection: {
      cls: ExerciseCollection
    },
    WorkoutBasic: {
      cls: WorkoutBasic
    },
    WorkoutCollection: {
      cls: WorkoutCollection
    },
    WorkoutItem: {
      cls: WorkoutItem
    },
    WorkoutItemCollection: {
      cls: WorkoutItemCollection
    },
    MovementBasic: {
      cls: MovementBasic
    },
    MovementCollection: {
      cls: MovementCollection
    },
    MuscleBasic: {
      cls: MuscleBasic
    },
    MuscleCollection: {
      cls: MuscleCollection
    }
  };
  return tt.core.defineClass({
    init: function init() {
      this.odb = new Odb();

      for (var clsName in classes) {
        var clsProps = classes[clsName];
        clsProps.cls.prototype.meta = {
          name: clsName
        };
        this.odb.registerClass(clsProps.cls);
      }
    },

    load(name) {
      return tt.ajax.getJson(name).then(json => this.odb.fromJson(json));
    },

    save(name, root) {
      return tt.ajax.postJson(name, this.odb.toJson(root));
    }

  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NhbXBsZXMvc3BvcnRzL21vZGVsL0RiLmpzIl0sIm5hbWVzIjpbImRlZmluZSIsInR0IiwiUm9vdCIsIkV4ZXJjaXNlQmFzaWMiLCJFeGVyY2lzZUNvbGxlY3Rpb24iLCJXb3Jrb3V0QmFzaWMiLCJXb3Jrb3V0Q29sbGVjdGlvbiIsIldvcmtvdXRJdGVtIiwiV29ya291dEl0ZW1Db2xsZWN0aW9uIiwiTW92ZW1lbnRCYXNpYyIsIk1vdmVtZW50Q29sbGVjdGlvbiIsIk11c2NsZUJhc2ljIiwiTXVzY2xlQ29sbGVjdGlvbiIsImNsYXNzZXMiLCJjbHMiLCJjb3JlIiwiZGVmaW5lQ2xhc3MiLCJpbml0Iiwib2RiIiwiT2RiIiwiY2xzTmFtZSIsImNsc1Byb3BzIiwicHJvdG90eXBlIiwibWV0YSIsIm5hbWUiLCJyZWdpc3RlckNsYXNzIiwibG9hZCIsImFqYXgiLCJnZXRKc29uIiwidGhlbiIsImpzb24iLCJmcm9tSnNvbiIsInNhdmUiLCJyb290IiwicG9zdEpzb24iLCJ0b0pzb24iXSwibWFwcGluZ3MiOiI7O0FBQUFBLE1BQU0sQ0FBQyxDQUFDLG9CQUFELEVBQXVCLFFBQXZCLEVBQWlDLGlCQUFqQyxFQUFvRCxzQkFBcEQsRUFBNEUsZ0JBQTVFLEVBQThGLHFCQUE5RixFQUFxSCxlQUFySCxFQUFzSSx5QkFBdEksRUFBaUssaUJBQWpLLEVBQW9MLHNCQUFwTCxFQUE0TSxlQUE1TSxFQUE2TixvQkFBN04sQ0FBRCxFQUFxUCxVQUFVQyxFQUFWLEVBQWNDLElBQWQsRUFBb0JDLGFBQXBCLEVBQW1DQyxrQkFBbkMsRUFBdURDLFlBQXZELEVBQXFFQyxpQkFBckUsRUFBd0ZDLFdBQXhGLEVBQXFHQyxxQkFBckcsRUFBNEhDLGFBQTVILEVBQTJJQyxrQkFBM0ksRUFBK0pDLFdBQS9KLEVBQTRLQyxnQkFBNUssRUFBOEw7QUFFcmIsTUFBSUMsT0FBTyxHQUFHO0FBQ1ZYLElBQUFBLElBQUksRUFBRTtBQUFFWSxNQUFBQSxHQUFHLEVBQUVaO0FBQVAsS0FESTtBQUVWQyxJQUFBQSxhQUFhLEVBQUU7QUFBRVcsTUFBQUEsR0FBRyxFQUFFWDtBQUFQLEtBRkw7QUFHVkMsSUFBQUEsa0JBQWtCLEVBQUU7QUFBRVUsTUFBQUEsR0FBRyxFQUFFVjtBQUFQLEtBSFY7QUFJVkMsSUFBQUEsWUFBWSxFQUFFO0FBQUVTLE1BQUFBLEdBQUcsRUFBRVQ7QUFBUCxLQUpKO0FBS1ZDLElBQUFBLGlCQUFpQixFQUFFO0FBQUVRLE1BQUFBLEdBQUcsRUFBRVI7QUFBUCxLQUxUO0FBTVZDLElBQUFBLFdBQVcsRUFBRTtBQUFFTyxNQUFBQSxHQUFHLEVBQUVQO0FBQVAsS0FOSDtBQU9WQyxJQUFBQSxxQkFBcUIsRUFBRTtBQUFFTSxNQUFBQSxHQUFHLEVBQUVOO0FBQVAsS0FQYjtBQVFWQyxJQUFBQSxhQUFhLEVBQUU7QUFBRUssTUFBQUEsR0FBRyxFQUFFTDtBQUFQLEtBUkw7QUFTVkMsSUFBQUEsa0JBQWtCLEVBQUU7QUFBRUksTUFBQUEsR0FBRyxFQUFFSjtBQUFQLEtBVFY7QUFVVkMsSUFBQUEsV0FBVyxFQUFFO0FBQUVHLE1BQUFBLEdBQUcsRUFBRUg7QUFBUCxLQVZIO0FBV1ZDLElBQUFBLGdCQUFnQixFQUFFO0FBQUVFLE1BQUFBLEdBQUcsRUFBRUY7QUFBUDtBQVhSLEdBQWQ7QUFjQSxTQUFPWCxFQUFFLENBQUNjLElBQUgsQ0FBUUMsV0FBUixDQUFvQjtBQUV2QkMsSUFBQUEsSUFBSSxFQUFFLGdCQUFZO0FBQ2QsV0FBS0MsR0FBTCxHQUFXLElBQUlDLEdBQUosRUFBWDs7QUFDQSxXQUFLLElBQUlDLE9BQVQsSUFBb0JQLE9BQXBCLEVBQTZCO0FBQ3pCLFlBQUlRLFFBQVEsR0FBR1IsT0FBTyxDQUFDTyxPQUFELENBQXRCO0FBQ0FDLFFBQUFBLFFBQVEsQ0FBQ1AsR0FBVCxDQUFhUSxTQUFiLENBQXVCQyxJQUF2QixHQUE4QjtBQUFFQyxVQUFBQSxJQUFJLEVBQUVKO0FBQVIsU0FBOUI7QUFDQSxhQUFLRixHQUFMLENBQVNPLGFBQVQsQ0FBdUJKLFFBQVEsQ0FBQ1AsR0FBaEM7QUFDSDtBQUNKLEtBVHNCOztBQVd2QlksSUFBQUEsSUFBSSxDQUFDRixJQUFELEVBQU87QUFDUCxhQUFPdkIsRUFBRSxDQUFDMEIsSUFBSCxDQUFRQyxPQUFSLENBQWdCSixJQUFoQixFQUFzQkssSUFBdEIsQ0FBMkJDLElBQUksSUFBSSxLQUFLWixHQUFMLENBQVNhLFFBQVQsQ0FBa0JELElBQWxCLENBQW5DLENBQVA7QUFDSCxLQWJzQjs7QUFldkJFLElBQUFBLElBQUksQ0FBQ1IsSUFBRCxFQUFPUyxJQUFQLEVBQWE7QUFDYixhQUFPaEMsRUFBRSxDQUFDMEIsSUFBSCxDQUFRTyxRQUFSLENBQWlCVixJQUFqQixFQUF1QixLQUFLTixHQUFMLENBQVNpQixNQUFULENBQWdCRixJQUFoQixDQUF2QixDQUFQO0FBQ0g7O0FBakJzQixHQUFwQixDQUFQO0FBcUJILENBckNLLENBQU4iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi8uLi8uLi9zcmMvaW5kZXgnLCAnLi9Sb290JywgJy4vRXhlcmNpc2VCYXNpYycsICcuL0V4ZXJjaXNlQ29sbGVjdGlvbicsICcuL1dvcmtvdXRCYXNpYycsICcuL1dvcmtvdXRDb2xsZWN0aW9uJywgJy4vV29ya291dEl0ZW0nLCAnLi9Xb3Jrb3V0SXRlbUNvbGxlY3Rpb24nLCAnLi9Nb3ZlbWVudEJhc2ljJywgJy4vTW92ZW1lbnRDb2xsZWN0aW9uJywgJy4vTXVzY2xlQmFzaWMnLCAnLi9NdXNjbGVDb2xsZWN0aW9uJ10sIGZ1bmN0aW9uICh0dCwgUm9vdCwgRXhlcmNpc2VCYXNpYywgRXhlcmNpc2VDb2xsZWN0aW9uLCBXb3Jrb3V0QmFzaWMsIFdvcmtvdXRDb2xsZWN0aW9uLCBXb3Jrb3V0SXRlbSwgV29ya291dEl0ZW1Db2xsZWN0aW9uLCBNb3ZlbWVudEJhc2ljLCBNb3ZlbWVudENvbGxlY3Rpb24sIE11c2NsZUJhc2ljLCBNdXNjbGVDb2xsZWN0aW9uKSB7XG5cbiAgICB2YXIgY2xhc3NlcyA9IHtcbiAgICAgICAgUm9vdDogeyBjbHM6IFJvb3QgfSxcbiAgICAgICAgRXhlcmNpc2VCYXNpYzogeyBjbHM6IEV4ZXJjaXNlQmFzaWMgfSxcbiAgICAgICAgRXhlcmNpc2VDb2xsZWN0aW9uOiB7IGNsczogRXhlcmNpc2VDb2xsZWN0aW9uIH0sXG4gICAgICAgIFdvcmtvdXRCYXNpYzogeyBjbHM6IFdvcmtvdXRCYXNpYyB9LFxuICAgICAgICBXb3Jrb3V0Q29sbGVjdGlvbjogeyBjbHM6IFdvcmtvdXRDb2xsZWN0aW9uIH0sXG4gICAgICAgIFdvcmtvdXRJdGVtOiB7IGNsczogV29ya291dEl0ZW0gfSxcbiAgICAgICAgV29ya291dEl0ZW1Db2xsZWN0aW9uOiB7IGNsczogV29ya291dEl0ZW1Db2xsZWN0aW9uIH0sXG4gICAgICAgIE1vdmVtZW50QmFzaWM6IHsgY2xzOiBNb3ZlbWVudEJhc2ljIH0sXG4gICAgICAgIE1vdmVtZW50Q29sbGVjdGlvbjogeyBjbHM6IE1vdmVtZW50Q29sbGVjdGlvbiB9LFxuICAgICAgICBNdXNjbGVCYXNpYzogeyBjbHM6IE11c2NsZUJhc2ljIH0sXG4gICAgICAgIE11c2NsZUNvbGxlY3Rpb246IHsgY2xzOiBNdXNjbGVDb2xsZWN0aW9uIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHR0LmNvcmUuZGVmaW5lQ2xhc3Moe1xuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMub2RiID0gbmV3IE9kYigpO1xuICAgICAgICAgICAgZm9yICh2YXIgY2xzTmFtZSBpbiBjbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNsc1Byb3BzID0gY2xhc3Nlc1tjbHNOYW1lXTtcbiAgICAgICAgICAgICAgICBjbHNQcm9wcy5jbHMucHJvdG90eXBlLm1ldGEgPSB7IG5hbWU6IGNsc05hbWUgfTtcbiAgICAgICAgICAgICAgICB0aGlzLm9kYi5yZWdpc3RlckNsYXNzKGNsc1Byb3BzLmNscyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgbG9hZChuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdHQuYWpheC5nZXRKc29uKG5hbWUpLnRoZW4oanNvbiA9PiB0aGlzLm9kYi5mcm9tSnNvbihqc29uKSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2F2ZShuYW1lLCByb290KSB7XG4gICAgICAgICAgICByZXR1cm4gdHQuYWpheC5wb3N0SnNvbihuYW1lLCB0aGlzLm9kYi50b0pzb24ocm9vdCkpO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxufSk7XG4iXX0=