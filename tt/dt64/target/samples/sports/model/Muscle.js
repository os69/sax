"use strict";

define(['../../../src/index', './Object'], function (tt, Object) {
  return tt.core.defineDerivedClass(Object, {
    delete: function _delete() {
      if (!Object.prototype.delete.apply(this, arguments)) {
        return false;
      }

      tt.core.removeObject(this.parent.muscles, this);
      return true;
    },
    insertBefore: function insertBefore(muscle) {
      var oldParent = muscle.parent;
      tt.core.removeObject(oldParent.muscles, muscle);
      muscle.parent = this.parent;
      var index = this.parent.muscles.indexOf(this);
      this.parent.muscles.splice(index, 0, muscle);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NhbXBsZXMvc3BvcnRzL21vZGVsL011c2NsZS5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJ0dCIsIk9iamVjdCIsImNvcmUiLCJkZWZpbmVEZXJpdmVkQ2xhc3MiLCJkZWxldGUiLCJwcm90b3R5cGUiLCJhcHBseSIsImFyZ3VtZW50cyIsInJlbW92ZU9iamVjdCIsInBhcmVudCIsIm11c2NsZXMiLCJpbnNlcnRCZWZvcmUiLCJtdXNjbGUiLCJvbGRQYXJlbnQiLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE1BQU0sQ0FBQyxDQUFDLG9CQUFELEVBQXVCLFVBQXZCLENBQUQsRUFBcUMsVUFBVUMsRUFBVixFQUFjQyxNQUFkLEVBQXNCO0FBRTdELFNBQU9ELEVBQUUsQ0FBQ0UsSUFBSCxDQUFRQyxrQkFBUixDQUEyQkYsTUFBM0IsRUFBbUM7QUFFdENHLElBQUFBLE1BQU0sRUFBRSxtQkFBWTtBQUNoQixVQUFJLENBQUNILE1BQU0sQ0FBQ0ksU0FBUCxDQUFpQkQsTUFBakIsQ0FBd0JFLEtBQXhCLENBQThCLElBQTlCLEVBQW9DQyxTQUFwQyxDQUFMLEVBQXFEO0FBQ2pELGVBQU8sS0FBUDtBQUNIOztBQUNEUCxNQUFBQSxFQUFFLENBQUNFLElBQUgsQ0FBUU0sWUFBUixDQUFxQixLQUFLQyxNQUFMLENBQVlDLE9BQWpDLEVBQTBDLElBQTFDO0FBQ0EsYUFBTyxJQUFQO0FBQ0gsS0FScUM7QUFVdENDLElBQUFBLFlBQVksRUFBRSxzQkFBVUMsTUFBVixFQUFrQjtBQUM1QixVQUFJQyxTQUFTLEdBQUdELE1BQU0sQ0FBQ0gsTUFBdkI7QUFDQVQsTUFBQUEsRUFBRSxDQUFDRSxJQUFILENBQVFNLFlBQVIsQ0FBcUJLLFNBQVMsQ0FBQ0gsT0FBL0IsRUFBd0NFLE1BQXhDO0FBQ0FBLE1BQUFBLE1BQU0sQ0FBQ0gsTUFBUCxHQUFnQixLQUFLQSxNQUFyQjtBQUNBLFVBQUlLLEtBQUssR0FBRyxLQUFLTCxNQUFMLENBQVlDLE9BQVosQ0FBb0JLLE9BQXBCLENBQTRCLElBQTVCLENBQVo7QUFDQSxXQUFLTixNQUFMLENBQVlDLE9BQVosQ0FBb0JNLE1BQXBCLENBQTJCRixLQUEzQixFQUFrQyxDQUFsQyxFQUFxQ0YsTUFBckM7QUFDSDtBQWhCcUMsR0FBbkMsQ0FBUDtBQW9CSCxDQXRCSyxDQUFOIiwic291cmNlc0NvbnRlbnQiOlsiZGVmaW5lKFsnLi4vLi4vLi4vc3JjL2luZGV4JywgJy4vT2JqZWN0J10sIGZ1bmN0aW9uICh0dCwgT2JqZWN0KSB7XG5cbiAgICByZXR1cm4gdHQuY29yZS5kZWZpbmVEZXJpdmVkQ2xhc3MoT2JqZWN0LCB7XG5cbiAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuZGVsZXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0dC5jb3JlLnJlbW92ZU9iamVjdCh0aGlzLnBhcmVudC5tdXNjbGVzLCB0aGlzKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGluc2VydEJlZm9yZTogZnVuY3Rpb24gKG11c2NsZSkge1xuICAgICAgICAgICAgdmFyIG9sZFBhcmVudCA9IG11c2NsZS5wYXJlbnQ7XG4gICAgICAgICAgICB0dC5jb3JlLnJlbW92ZU9iamVjdChvbGRQYXJlbnQubXVzY2xlcywgbXVzY2xlKTtcbiAgICAgICAgICAgIG11c2NsZS5wYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMucGFyZW50Lm11c2NsZXMuaW5kZXhPZih0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucGFyZW50Lm11c2NsZXMuc3BsaWNlKGluZGV4LCAwLCBtdXNjbGUpO1xuICAgICAgICB9XG5cbiAgICB9KTtcblxufSk7Il19