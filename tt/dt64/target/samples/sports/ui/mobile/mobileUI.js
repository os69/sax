"use strict";

define(['../../../../src/index', './workoutBrowser', './workoutRunner', '../../model/Model'], function (tt, workoutBrowser, workoutRunner, Model) {
  var module = {
    createTtNode: tt.createTtNodeCreator({
      init: function init(params) {
        this.model = params.model;
        this.mode = 'workout-browser';
        tt.initProperty(this, 'mode');
        this.focusObject = params.model.root.workout;
        tt.initProperty(this, 'focusObject');
      },
      render: function render() {
        return tt.createTtNode({
          type: 'div',
          children: function () {
            var root = this.model.getRoot();
            this.setFocusObject(root.workout);
            return [tt.createTtNode({
              type: 'div',
              children: function () {
                switch (this.getMode()) {
                  case 'workout-browser':
                    return [workoutBrowser.createTtNode({
                      ui: this
                    })];

                  case 'workout-runner':
                    return [workoutRunner.createTtNode({
                      ui: this
                    })];
                }
              }.bind(this)
            })];
          }.bind(this)
        });
      }
    }),
    start: function start() {
      var model = new Model();
      var ttNode = this.createTtNode({
        model: model
      });
      document.getElementById('rootContainer').appendChild(ttNode.getDomNode());
      model.load().then(function () {// var workout = model.root.workout.workouts[0].workouts[0];
        //  ttNode.renderer.setFocusObject(workout);
      });
    }
  };
  return module;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NhbXBsZXMvc3BvcnRzL3VpL21vYmlsZS9tb2JpbGVVSS5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJ0dCIsIndvcmtvdXRCcm93c2VyIiwid29ya291dFJ1bm5lciIsIk1vZGVsIiwibW9kdWxlIiwiY3JlYXRlVHROb2RlIiwiY3JlYXRlVHROb2RlQ3JlYXRvciIsImluaXQiLCJwYXJhbXMiLCJtb2RlbCIsIm1vZGUiLCJpbml0UHJvcGVydHkiLCJmb2N1c09iamVjdCIsInJvb3QiLCJ3b3Jrb3V0IiwicmVuZGVyIiwidHlwZSIsImNoaWxkcmVuIiwiZ2V0Um9vdCIsInNldEZvY3VzT2JqZWN0IiwiZ2V0TW9kZSIsInVpIiwiYmluZCIsInN0YXJ0IiwidHROb2RlIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImFwcGVuZENoaWxkIiwiZ2V0RG9tTm9kZSIsImxvYWQiLCJ0aGVuIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxNQUFNLENBQUMsQ0FBQyx1QkFBRCxFQUEwQixrQkFBMUIsRUFBOEMsaUJBQTlDLEVBQWlFLG1CQUFqRSxDQUFELEVBQXdGLFVBQVVDLEVBQVYsRUFBY0MsY0FBZCxFQUE4QkMsYUFBOUIsRUFBNkNDLEtBQTdDLEVBQW9EO0FBRTlJLE1BQUlDLE1BQU0sR0FBRztBQUVUQyxJQUFBQSxZQUFZLEVBQUVMLEVBQUUsQ0FBQ00sbUJBQUgsQ0FBdUI7QUFDakNDLE1BQUFBLElBQUksRUFBRSxjQUFVQyxNQUFWLEVBQWtCO0FBQ3BCLGFBQUtDLEtBQUwsR0FBYUQsTUFBTSxDQUFDQyxLQUFwQjtBQUNBLGFBQUtDLElBQUwsR0FBWSxpQkFBWjtBQUNBVixRQUFBQSxFQUFFLENBQUNXLFlBQUgsQ0FBZ0IsSUFBaEIsRUFBc0IsTUFBdEI7QUFDQSxhQUFLQyxXQUFMLEdBQW1CSixNQUFNLENBQUNDLEtBQVAsQ0FBYUksSUFBYixDQUFrQkMsT0FBckM7QUFDQWQsUUFBQUEsRUFBRSxDQUFDVyxZQUFILENBQWdCLElBQWhCLEVBQXNCLGFBQXRCO0FBQ0gsT0FQZ0M7QUFRakNJLE1BQUFBLE1BQU0sRUFBRSxrQkFBWTtBQUNoQixlQUFPZixFQUFFLENBQUNLLFlBQUgsQ0FBZ0I7QUFDbkJXLFVBQUFBLElBQUksRUFBRSxLQURhO0FBRW5CQyxVQUFBQSxRQUFRLEVBQUUsWUFBWTtBQUNsQixnQkFBSUosSUFBSSxHQUFHLEtBQUtKLEtBQUwsQ0FBV1MsT0FBWCxFQUFYO0FBQ0EsaUJBQUtDLGNBQUwsQ0FBb0JOLElBQUksQ0FBQ0MsT0FBekI7QUFDQSxtQkFBTyxDQUFDZCxFQUFFLENBQUNLLFlBQUgsQ0FBZ0I7QUFDcEJXLGNBQUFBLElBQUksRUFBRSxLQURjO0FBRXBCQyxjQUFBQSxRQUFRLEVBQUUsWUFBWTtBQUNsQix3QkFBUSxLQUFLRyxPQUFMLEVBQVI7QUFDSSx1QkFBSyxpQkFBTDtBQUNJLDJCQUFPLENBQUNuQixjQUFjLENBQUNJLFlBQWYsQ0FBNEI7QUFBRWdCLHNCQUFBQSxFQUFFLEVBQUU7QUFBTixxQkFBNUIsQ0FBRCxDQUFQOztBQUNKLHVCQUFLLGdCQUFMO0FBQ0ksMkJBQU8sQ0FBQ25CLGFBQWEsQ0FBQ0csWUFBZCxDQUEyQjtBQUFFZ0Isc0JBQUFBLEVBQUUsRUFBRTtBQUFOLHFCQUEzQixDQUFELENBQVA7QUFKUjtBQU1ILGVBUFMsQ0FPUkMsSUFQUSxDQU9ILElBUEc7QUFGVSxhQUFoQixDQUFELENBQVA7QUFXSCxXQWRTLENBY1JBLElBZFEsQ0FjSCxJQWRHO0FBRlMsU0FBaEIsQ0FBUDtBQWtCSDtBQTNCZ0MsS0FBdkIsQ0FGTDtBQWdDVEMsSUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBQ2YsVUFBSWQsS0FBSyxHQUFHLElBQUlOLEtBQUosRUFBWjtBQUNBLFVBQUlxQixNQUFNLEdBQUcsS0FBS25CLFlBQUwsQ0FBa0I7QUFBRUksUUFBQUEsS0FBSyxFQUFFQTtBQUFULE9BQWxCLENBQWI7QUFDQWdCLE1BQUFBLFFBQVEsQ0FBQ0MsY0FBVCxDQUF3QixlQUF4QixFQUF5Q0MsV0FBekMsQ0FBcURILE1BQU0sQ0FBQ0ksVUFBUCxFQUFyRDtBQUNBbkIsTUFBQUEsS0FBSyxDQUFDb0IsSUFBTixHQUFhQyxJQUFiLENBQWtCLFlBQVksQ0FDNUI7QUFDQTtBQUNELE9BSEQ7QUFJSDtBQXhDUSxHQUFiO0FBMkNBLFNBQU8xQixNQUFQO0FBRUgsQ0EvQ0ssQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uLy4uLy4uLy4uL3NyYy9pbmRleCcsICcuL3dvcmtvdXRCcm93c2VyJywgJy4vd29ya291dFJ1bm5lcicsICcuLi8uLi9tb2RlbC9Nb2RlbCddLCBmdW5jdGlvbiAodHQsIHdvcmtvdXRCcm93c2VyLCB3b3Jrb3V0UnVubmVyLCBNb2RlbCkge1xuXG4gICAgdmFyIG1vZHVsZSA9IHtcblxuICAgICAgICBjcmVhdGVUdE5vZGU6IHR0LmNyZWF0ZVR0Tm9kZUNyZWF0b3Ioe1xuICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKHBhcmFtcykge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwgPSBwYXJhbXMubW9kZWw7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlID0gJ3dvcmtvdXQtYnJvd3Nlcic7XG4gICAgICAgICAgICAgICAgdHQuaW5pdFByb3BlcnR5KHRoaXMsICdtb2RlJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c09iamVjdCA9IHBhcmFtcy5tb2RlbC5yb290LndvcmtvdXQ7XG4gICAgICAgICAgICAgICAgdHQuaW5pdFByb3BlcnR5KHRoaXMsICdmb2N1c09iamVjdCcpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0dC5jcmVhdGVUdE5vZGUoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb290ID0gdGhpcy5tb2RlbC5nZXRSb290KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZvY3VzT2JqZWN0KHJvb3Qud29ya291dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3R0LmNyZWF0ZVR0Tm9kZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLmdldE1vZGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnd29ya291dC1icm93c2VyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3dvcmtvdXRCcm93c2VyLmNyZWF0ZVR0Tm9kZSh7IHVpOiB0aGlzIH0pXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3dvcmtvdXQtcnVubmVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3dvcmtvdXRSdW5uZXIuY3JlYXRlVHROb2RlKHsgdWk6IHRoaXMgfSldO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfS5iaW5kKHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICAgICAgICAgIH0uYmluZCh0aGlzKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbW9kZWwgPSBuZXcgTW9kZWwoKTtcbiAgICAgICAgICAgIHZhciB0dE5vZGUgPSB0aGlzLmNyZWF0ZVR0Tm9kZSh7IG1vZGVsOiBtb2RlbCB9KTtcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290Q29udGFpbmVyJykuYXBwZW5kQ2hpbGQodHROb2RlLmdldERvbU5vZGUoKSk7XG4gICAgICAgICAgICBtb2RlbC5sb2FkKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIC8vIHZhciB3b3Jrb3V0ID0gbW9kZWwucm9vdC53b3Jrb3V0LndvcmtvdXRzWzBdLndvcmtvdXRzWzBdO1xuICAgICAgICAgICAgICAvLyAgdHROb2RlLnJlbmRlcmVyLnNldEZvY3VzT2JqZWN0KHdvcmtvdXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIG1vZHVsZTtcblxufSk7XG4iXX0=