Die Begriffe Prozesskette und Prozessschritt sind verbreitet (ETL). Nach Möglichkeit sollte man also diese Begriffe bei
der Modellierung eines Prozesskettenframeworks verwenden.

Muss man bei der Modellierung von Prozessketten die zu verarbeitenden Daten gleich mit modellieren?

Prozessschritte sind meist massenfähig. Es ist effektiver einen Prozessschritt gleich mit vielen zu verbeitenden Objekten zu starten,
da dann Rüst- und Abrüstzeiten nur einmal anfallen. Beispiel für eine Rüstzeit bei TASDK: Laden des Regelsatzes.

Extrem1: Eine Prozessschritt verarbeitet alle Objekte
Extrem2: Eine Prozessschritt verarbeitet nur ein Objekt <- Es könnte auch für den Benutzer nur so aussehen als gebe es genau einen Prozessschritt
für jedes Objekt, intern erfolgt aber eine Massenverarbeitung.

Wenn ein Prozessschritt massenfähig ist, könnte es sein, dass Objekte nur teilweise bearbeitet werden können (bei einer Teilmenge der Objekte
treten Fehler auf). Gibt es also neben dem Status der Prozesskette/Prozessschritts auch zwingenderweise einen Objektstatus?

Sollte man Prozess und Prozessdaten nicht klarer trennnen: Prozesskette, Prozessschritt, Prozessdatencontainer, Objekt im Prozessdatencontainer,
Status einer Prozesskette, Status eines Prozessschritts, Status eines Objekts

Kann sich die Zuordnung eines Objekts zu einer Prozesskette aus Optimierungsgründen ändern: Es gibt zwei Prozessketten jeweils mit den Prozesschritten A und B (sequentiell). Bei Prozessschritt A gibt es für beide Prozessketten 50% Aussschuss (fehlerhafte Objekte). Es wäre deshalb aus Optimierungsgründen
sinnvoll die beiden Prozessketten zusammen zu führen. Prozessschritt B wird also mit den verbliebenen Objekten aus beiden Prozessketten befüllt.
Prozessketten zusammen zu führen ist wahrscheinlich immer erlaubt. Umgekehrt ist es problematisch: Man kann die Objekte aus einer Prozessketten
nicht einfach auf andere Ketten verteilen, da zischen den Objekten eine Beziehung bestehen kann und die Objekte deshalb nur gemeinsam bearbeitet
werden können.

Wenn Rüstzeiten wirklich das Problem sind, könnte man darüber nachdenken einen Prozesschritt nur einmal zu instanziieren (Rüstzeit verbrauchen) und dann
immer im Speicher zu behalten (bis der Appserver ausgeschaltet wird). Bei Bedarf übergibt dann der Prozesskettenkontroller zu verarbeitenden Objekte an den Prozessschritt.

Es gibt eine Prozessketten, welche den Arbeitsvorrat (zu verarbeitende Objekte) monitort und dann Prozessketten zu Abarbeitung einer Objektteilmenge erzeugt (Prozesskette erzeugt Prozesskette).

Generell: Können Prozessketten verwendet werden um das Prozesskettenframwork selbst zu implementieren.

Gibt es ein Prozesskettentemplate aus dem dann viele Prozessketten (instanzen) erzeugt werden? 

Definition der Prozesskette:
1) Netzwerk: Knoten und Kanten
2) Parallele und Sequentielle Abschnitte
3) Regelbasiert: Eine Prozesschritt erklärt sich für bestimmte Prozesskettenstatus zuständig. Am Ende des Prozessschritts wird eine neuer Prozesskettenstatus gesetzt.Oder: Ein Prozessschritt erklärt sich für bestimmte Objektstatus zuständig.

Im Node-Cluster gibt es viele Nodes. Die Objekte (Prozessketten, Prozesschritt) sollten auf allen Nodes in Javascript zugreifbar sein-> Hibernate für Javascript?

Errorhandling: Ein Prozesschritt bricht ab oder kann seine Arbeit nur teilweise durchführen. Der Prozessschritt muss dann nach z.B manueller Fehlerkorrektur neu angestartet werden (resume) oder er wird manuell manuell zwangsbeendet.

Alte Prozessketten müßen archiviert werden.



