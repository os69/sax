"use strict";

define(['../../src/index'], function (tt) {
  var React = {
    parseArgs: function parseArgs(args) {
      var textChildren = [];
      var nodeChildren = [];

      for (var i = 2; i < args.length; ++i) {
        var arg = args[i];

        if (tt.core.isString(arg)) {
          if (arg) {
            textChildren.push(arg);
          }
        } else {
          nodeChildren.push(arg);
        }
      }

      var children;

      if (nodeChildren.length === 1 && tt.core.isList(nodeChildren[0])) {
        children = nodeChildren[0];
      } else {
        children = nodeChildren;
      }

      var props = {
        type: args[0],
        text: textChildren.join(' '),
        children: children
      };
      var attributes = args[1];

      if (attributes) {
        if (attributes.type) {
          throw 'type not allowd in attributes ' + JSON.stringify(attributes);
        }

        if (attributes.text && props.text) {
          throw 'text not allowed in attributes ' + JSON.stringify(attributes);
        }

        if (attributes.children && props.children) {
          throw 'children not allowed in attributes ' + JSON.stringify(attributes);
        }

        props = tt.core.extend(props, attributes);
      }

      return props;
    },
    createElement: function createElement() {
      var options = this.parseArgs(tt.core.argumentsToList(arguments));

      if (tt.core.isFunction(options.type)) {
        return options.type.apply(null, [options]);
      } else {
        return tt.createTtNode(options);
      }
    }
  };
  var items = [{
    label: 'Pos1',
    subItems: [{
      label: '1-1'
    }, {
      label: '1-2'
    }]
  }, {
    label: 'Pos2',
    subItems: [{
      label: '2-1'
    }, {
      label: '2-2'
    }]
  }];

  var SubItemNode = function SubItemNode(props) {
    return /*#__PURE__*/React.createElement("li", null, props.subItem.label);
  };

  var ItemNode = function ItemNode(props) {
    return /*#__PURE__*/React.createElement("li", null, /*#__PURE__*/React.createElement("span", null, props.item.label), /*#__PURE__*/React.createElement("ul", null, tt.createMappedList(props.item.subItems, subItem => /*#__PURE__*/React.createElement(SubItemNode, {
      subItem: subItem
    }))));
  };

  var node = /*#__PURE__*/React.createElement("ul", null, tt.createMappedList(items, item => /*#__PURE__*/React.createElement(ItemNode, {
    item: item
  })));
  document.body.appendChild(node.getDomNode());
  items.push({
    label: '3',
    subItems: []
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0LmpzeCJdLCJuYW1lcyI6WyJkZWZpbmUiLCJ0dCIsIlJlYWN0IiwicGFyc2VBcmdzIiwiYXJncyIsInRleHRDaGlsZHJlbiIsIm5vZGVDaGlsZHJlbiIsImkiLCJsZW5ndGgiLCJhcmciLCJjb3JlIiwiaXNTdHJpbmciLCJwdXNoIiwiY2hpbGRyZW4iLCJpc0xpc3QiLCJwcm9wcyIsInR5cGUiLCJ0ZXh0Iiwiam9pbiIsImF0dHJpYnV0ZXMiLCJKU09OIiwic3RyaW5naWZ5IiwiZXh0ZW5kIiwiY3JlYXRlRWxlbWVudCIsIm9wdGlvbnMiLCJhcmd1bWVudHNUb0xpc3QiLCJhcmd1bWVudHMiLCJpc0Z1bmN0aW9uIiwiYXBwbHkiLCJjcmVhdGVUdE5vZGUiLCJpdGVtcyIsImxhYmVsIiwic3ViSXRlbXMiLCJTdWJJdGVtTm9kZSIsInN1Ykl0ZW0iLCJJdGVtTm9kZSIsIml0ZW0iLCJjcmVhdGVNYXBwZWRMaXN0Iiwibm9kZSIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiZ2V0RG9tTm9kZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsTUFBTSxDQUFDLENBQUMsaUJBQUQsQ0FBRCxFQUFzQixVQUFVQyxFQUFWLEVBQWM7QUFFdEMsTUFBSUMsS0FBSyxHQUFHO0FBRVJDLElBQUFBLFNBQVMsRUFBRSxtQkFBVUMsSUFBVixFQUFnQjtBQUV2QixVQUFJQyxZQUFZLEdBQUcsRUFBbkI7QUFDQSxVQUFJQyxZQUFZLEdBQUcsRUFBbkI7O0FBQ0EsV0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQXpCLEVBQWlDLEVBQUVELENBQW5DLEVBQXNDO0FBQ2xDLFlBQUlFLEdBQUcsR0FBR0wsSUFBSSxDQUFDRyxDQUFELENBQWQ7O0FBQ0EsWUFBSU4sRUFBRSxDQUFDUyxJQUFILENBQVFDLFFBQVIsQ0FBaUJGLEdBQWpCLENBQUosRUFBMkI7QUFDdkIsY0FBSUEsR0FBSixFQUFTO0FBQ0xK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QVcsQ0FBVXBCLEtBQVYsRUFBaUI7QUFDNUIsd0JBQU8sNkNBQ0gsa0NBQU9BLEtBQUssQ0FBQ3FCLElBQU4sQ0FBV0wsS0FBbEIsQ0FERyxlQUVILGdDQUFLOUIsRUFBRSxDQUFDb0MsZ0JBQUgsQ0FBb0J0QixLQUFLLENBQUNxQixJQUFOLENBQVdKLFFBQS9CLEVBQXlDRSxPQUFPLGlCQUFJLG9CQUFDLFdBQUQ7QUFBYSxNQUFBLE9BQU8sRUFBRUE7QUFBdEIsTUFBcEQsQ0FBTCxDQUZHLENBQVA7QUFJSCxHQUxEOztBQU9BLE1BQUlJLElBQUksZ0JBQ0osZ0NBQ0tyQyxFQUFFLENBQUNvQyxnQkFBSCxDQUFvQlAsS0FBcEIsRUFBMkJNLElBQUksaUJBQUksb0JBQUMsUUFBRDtBQUFVLElBQUEsSUFBSSxFQUFFQTtBQUFoQixJQUFuQyxDQURMLENBREo7QUFJQUcsRUFBQUEsUUFBUSxDQUFDQyxJQUFULENBQWNDLFdBQWQsQ0FBMEJILElBQUksQ0FBQ0ksVUFBTCxFQUExQjtBQUVBWixFQUFBQSxLQUFLLENBQUNsQixJQUFOLENBQVc7QUFBRW1CLElBQUFBLEtBQUssRUFBRSxHQUFUO0FBQWNDLElBQUFBLFFBQVEsRUFBQztBQUF2QixHQUFYO0FBRUgsQ0FoRkssQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uLy4uL3NyYy9pbmRleCddLCBmdW5jdGlvbiAodHQpIHtcblxuICAgIHZhciBSZWFjdCA9IHtcblxuICAgICAgICBwYXJzZUFyZ3M6IGZ1bmN0aW9uIChhcmdzKSB7XG5cbiAgICAgICAgICAgIHZhciB0ZXh0Q2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIHZhciBub2RlQ2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAyOyBpIDwgYXJncy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBhcmcgPSBhcmdzW2ldO1xuICAgICAgICAgICAgICAgIGlmICh0dC5jb3JlLmlzU3RyaW5nKGFyZykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dENoaWxkcmVuLnB1c2goYXJnKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNoaWxkcmVuLnB1c2goYXJnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaGlsZHJlbjtcbiAgICAgICAgICAgIGlmIChub2RlQ2hpbGRyZW4ubGVuZ3RoID09PSAxICYmIHR0LmNvcmUuaXNMaXN0KG5vZGVDaGlsZHJlblswXSkpIHtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IG5vZGVDaGlsZHJlblswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBub2RlQ2hpbGRyZW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBhcmdzWzBdLFxuICAgICAgICAgICAgICAgIHRleHQ6IHRleHRDaGlsZHJlbi5qb2luKCcgJyksXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IGNoaWxkcmVuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gYXJnc1sxXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMudHlwZSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAndHlwZSBub3QgYWxsb3dkIGluIGF0dHJpYnV0ZXMgJyArIEpTT04uc3RyaW5naWZ5KGF0dHJpYnV0ZXMpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLnRleHQgJiYgcHJvcHMudGV4dCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAndGV4dCBub3QgYWxsb3dlZCBpbiBhdHRyaWJ1dGVzICcgKyBKU09OLnN0cmluZ2lmeShhdHRyaWJ1dGVzKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5jaGlsZHJlbiAmJiBwcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnY2hpbGRyZW4gbm90IGFsbG93ZWQgaW4gYXR0cmlidXRlcyAnICsgSlNPTi5zdHJpbmdpZnkoYXR0cmlidXRlcylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJvcHMgPSB0dC5jb3JlLmV4dGVuZChwcm9wcywgYXR0cmlidXRlcylcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHByb3BzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZUVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5wYXJzZUFyZ3ModHQuY29yZS5hcmd1bWVudHNUb0xpc3QoYXJndW1lbnRzKSk7XG4gICAgICAgICAgICBpZiAodHQuY29yZS5pc0Z1bmN0aW9uKG9wdGlvbnMudHlwZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy50eXBlLmFwcGx5KG51bGwsIFtvcHRpb25zXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0dC5jcmVhdGVUdE5vZGUob3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaXRlbXMgPSBbeyBsYWJlbDogJ1BvczEnLCBzdWJJdGVtczogW3sgbGFiZWw6ICcxLTEnIH0sIHsgbGFiZWw6ICcxLTInIH1dIH0sIHsgbGFiZWw6ICdQb3MyJywgc3ViSXRlbXM6IFt7IGxhYmVsOiAnMi0xJyB9LCB7IGxhYmVsOiAnMi0yJyB9XSB9XTtcblxuICAgIHZhciBTdWJJdGVtTm9kZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gPGxpPntwcm9wcy5zdWJJdGVtLmxhYmVsfTwvbGk+O1xuICAgIH1cblxuICAgIHZhciBJdGVtTm9kZSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgICAgICByZXR1cm4gPGxpPlxuICAgICAgICAgICAgPHNwYW4+e3Byb3BzLml0ZW0ubGFiZWx9PC9zcGFuPlxuICAgICAgICAgICAgPHVsPnt0dC5jcmVhdGVNYXBwZWRMaXN0KHByb3BzLml0ZW0uc3ViSXRlbXMsIHN1Ykl0ZW0gPT4gPFN1Ykl0ZW1Ob2RlIHN1Ykl0ZW09e3N1Ykl0ZW19IC8+KX08L3VsPlxuICAgICAgICA8L2xpPjtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9XG4gICAgICAgIDx1bD5cbiAgICAgICAgICAgIHt0dC5jcmVhdGVNYXBwZWRMaXN0KGl0ZW1zLCBpdGVtID0+IDxJdGVtTm9kZSBpdGVtPXtpdGVtfSAvPil9XG4gICAgICAgIDwvdWw+O1xuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobm9kZS5nZXREb21Ob2RlKCkpO1xuXG4gICAgaXRlbXMucHVzaCh7IGxhYmVsOiAnMycsIHN1Ykl0ZW1zOltdIH0pO1xuXG59KTtcbiJdfQ==