"use strict";

define(['../src/index', './Tester', './testEvents', './testCalculatedProperty', './testMappedList', './testListFilter', './testFilteredList', './testReducedListProperty', './testDom'], function (tt, Tester, eventsTestCases, calculatedPropertiesTestCases, mappedListTestCases, listFilterTestCases, filteredListTestCases, reducedListPropertyTestCases, domTestCases) {
  var handlerCheck = {
    start: function start() {
      this.numberHandlers = tt.event.getNumberHandlers();
    },
    stop: function stop() {
      tester.assertEquals(tt.event.getNumberHandlers(), this.numberHandlers, 'check number event handlers');
    }
  };
  var tester = new Tester({
    preTestTasks: [handlerCheck.start.bind(handlerCheck)],
    postTestTasks: [handlerCheck.stop.bind(handlerCheck)]
  });
  tester.runTestCases(eventsTestCases);
  tester.runTestCases(calculatedPropertiesTestCases);
  tester.runTestCases(mappedListTestCases); //tester.runTestCases(listFilterTestCases);

  tester.runTestCases(filteredListTestCases);
  tester.runTestCases(reducedListPropertyTestCases);
  tester.runTestCases(domTestCases);
  tester.result();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Rlc3QvdGVzdC5qcyJdLCJuYW1lcyI6WyJkZWZpbmUiLCJ0dCIsIlRlc3RlciIsImV2ZW50c1Rlc3RDYXNlcyIsImNhbGN1bGF0ZWRQcm9wZXJ0aWVzVGVzdENhc2VzIiwibWFwcGVkTGlzdFRlc3RDYXNlcyIsImxpc3RGaWx0ZXJUZXN0Q2FzZXMiLCJmaWx0ZXJlZExpc3RUZXN0Q2FzZXMiLCJyZWR1Y2VkTGlzdFByb3BlcnR5VGVzdENhc2VzIiwiZG9tVGVzdENhc2VzIiwiaGFuZGxlckNoZWNrIiwic3RhcnQiLCJudW1iZXJIYW5kbGVycyIsImV2ZW50IiwiZ2V0TnVtYmVySGFuZGxlcnMiLCJzdG9wIiwidGVzdGVyIiwiYXNzZXJ0RXF1YWxzIiwicHJlVGVzdFRhc2tzIiwiYmluZCIsInBvc3RUZXN0VGFza3MiLCJydW5UZXN0Q2FzZXMiLCJyZXN1bHQiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE1BQU0sQ0FBQyxDQUFDLGNBQUQsRUFBaUIsVUFBakIsRUFBNkIsY0FBN0IsRUFBNkMsMEJBQTdDLEVBQXlFLGtCQUF6RSxFQUE2RixrQkFBN0YsRUFBaUgsb0JBQWpILEVBQXVJLDJCQUF2SSxFQUFvSyxXQUFwSyxDQUFELEVBQW1MLFVBQVVDLEVBQVYsRUFBY0MsTUFBZCxFQUFzQkMsZUFBdEIsRUFBdUNDLDZCQUF2QyxFQUFzRUMsbUJBQXRFLEVBQTJGQyxtQkFBM0YsRUFBZ0hDLHFCQUFoSCxFQUF1SUMsNEJBQXZJLEVBQXFLQyxZQUFySyxFQUFtTDtBQUV4VyxNQUFJQyxZQUFZLEdBQUc7QUFDZkMsSUFBQUEsS0FBSyxFQUFFLGlCQUFZO0FBQ2YsV0FBS0MsY0FBTCxHQUFzQlgsRUFBRSxDQUFDWSxLQUFILENBQVNDLGlCQUFULEVBQXRCO0FBQ0gsS0FIYztBQUlmQyxJQUFBQSxJQUFJLEVBQUUsZ0JBQVk7QUFDZEMsTUFBQUEsTUFBTSxDQUFDQyxZQUFQLENBQW9CaEIsRUFBRSxDQUFDWSxLQUFILENBQVNDLGlCQUFULEVBQXBCLEVBQWtELEtBQUtGLGNBQXZELEVBQXVFLDZCQUF2RTtBQUNIO0FBTmMsR0FBbkI7QUFTQSxNQUFJSSxNQUFNLEdBQUcsSUFBSWQsTUFBSixDQUFXO0FBQ3BCZ0IsSUFBQUEsWUFBWSxFQUFFLENBQUNSLFlBQVksQ0FBQ0MsS0FBYixDQUFtQlEsSUFBbkIsQ0FBd0JULFlBQXhCLENBQUQsQ0FETTtBQUVwQlUsSUFBQUEsYUFBYSxFQUFFLENBQUNWLFlBQVksQ0FBQ0ssSUFBYixDQUFrQkksSUFBbEIsQ0FBdUJULFlBQXZCLENBQUQ7QUFGSyxHQUFYLENBQWI7QUFLQU0sRUFBQUEsTUFBTSxDQUFDSyxZQUFQLENBQW9CbEIsZUFBcEI7QUFDQWEsRUFBQUEsTUFBTSxDQUFDSyxZQUFQLENBQW9CakIsNkJBQXBCO0FBQ0FZLEVBQUFBLE1BQU0sQ0FBQ0ssWUFBUCxDQUFvQmhCLG1CQUFwQixFQWxCd1csQ0FtQnhXOztBQUNBVyxFQUFBQSxNQUFNLENBQUNLLFlBQVAsQ0FBb0JkLHFCQUFwQjtBQUNBUyxFQUFBQSxNQUFNLENBQUNLLFlBQVAsQ0FBb0JiLDRCQUFwQjtBQUNBUSxFQUFBQSxNQUFNLENBQUNLLFlBQVAsQ0FBb0JaLFlBQXBCO0FBRUFPLEVBQUFBLE1BQU0sQ0FBQ00sTUFBUDtBQUVILENBMUJLLENBQU4iLCJzb3VyY2VzQ29udGVudCI6WyJkZWZpbmUoWycuLi9zcmMvaW5kZXgnLCAnLi9UZXN0ZXInLCAnLi90ZXN0RXZlbnRzJywgJy4vdGVzdENhbGN1bGF0ZWRQcm9wZXJ0eScsICcuL3Rlc3RNYXBwZWRMaXN0JywgJy4vdGVzdExpc3RGaWx0ZXInLCAnLi90ZXN0RmlsdGVyZWRMaXN0JywgJy4vdGVzdFJlZHVjZWRMaXN0UHJvcGVydHknLCAnLi90ZXN0RG9tJ10sIGZ1bmN0aW9uICh0dCwgVGVzdGVyLCBldmVudHNUZXN0Q2FzZXMsIGNhbGN1bGF0ZWRQcm9wZXJ0aWVzVGVzdENhc2VzLCBtYXBwZWRMaXN0VGVzdENhc2VzLCBsaXN0RmlsdGVyVGVzdENhc2VzLCBmaWx0ZXJlZExpc3RUZXN0Q2FzZXMsIHJlZHVjZWRMaXN0UHJvcGVydHlUZXN0Q2FzZXMsIGRvbVRlc3RDYXNlcykge1xuXG4gICAgdmFyIGhhbmRsZXJDaGVjayA9IHtcbiAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMubnVtYmVySGFuZGxlcnMgPSB0dC5ldmVudC5nZXROdW1iZXJIYW5kbGVycygpO1xuICAgICAgICB9LFxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0ZXN0ZXIuYXNzZXJ0RXF1YWxzKHR0LmV2ZW50LmdldE51bWJlckhhbmRsZXJzKCksIHRoaXMubnVtYmVySGFuZGxlcnMsICdjaGVjayBudW1iZXIgZXZlbnQgaGFuZGxlcnMnKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgdGVzdGVyID0gbmV3IFRlc3Rlcih7XG4gICAgICAgIHByZVRlc3RUYXNrczogW2hhbmRsZXJDaGVjay5zdGFydC5iaW5kKGhhbmRsZXJDaGVjayldLFxuICAgICAgICBwb3N0VGVzdFRhc2tzOiBbaGFuZGxlckNoZWNrLnN0b3AuYmluZChoYW5kbGVyQ2hlY2spXVxuICAgIH0pO1xuXG4gICAgdGVzdGVyLnJ1blRlc3RDYXNlcyhldmVudHNUZXN0Q2FzZXMpO1xuICAgIHRlc3Rlci5ydW5UZXN0Q2FzZXMoY2FsY3VsYXRlZFByb3BlcnRpZXNUZXN0Q2FzZXMpO1xuICAgIHRlc3Rlci5ydW5UZXN0Q2FzZXMobWFwcGVkTGlzdFRlc3RDYXNlcyk7XG4gICAgLy90ZXN0ZXIucnVuVGVzdENhc2VzKGxpc3RGaWx0ZXJUZXN0Q2FzZXMpO1xuICAgIHRlc3Rlci5ydW5UZXN0Q2FzZXMoZmlsdGVyZWRMaXN0VGVzdENhc2VzKTtcbiAgICB0ZXN0ZXIucnVuVGVzdENhc2VzKHJlZHVjZWRMaXN0UHJvcGVydHlUZXN0Q2FzZXMpO1xuICAgIHRlc3Rlci5ydW5UZXN0Q2FzZXMoZG9tVGVzdENhc2VzKTtcblxuICAgIHRlc3Rlci5yZXN1bHQoKTtcblxufSk7XG5cblxuXG5cblxuIl19