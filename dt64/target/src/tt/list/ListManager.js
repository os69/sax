"use strict";

define(['../../core/core', '../../core/event'], function (core, event) {
  return core.defineClass({
    init: function init(params) {
      this.adminList = [];
      this.usageCounter = 0;
      this.active = false;
      event.addModificationHandler(this.targetList, this.eventHandlerModificationHandler.bind(this));
    },
    incUsage: function incUsage() {
      this.usageCounter++;

      if (this.usageCounter > 0 && !this.active) {
        this.start();
      }
    },
    decUsage: function decUsage() {
      if (this.usageCounter === 0) {
        throw 'program error';
      }

      this.usageCounter--;

      if (this.usageCounter === 0 & this.active) {
        this.stop();
      }
    },
    start: function start() {
      if (this.active) {
        return;
      }

      this.active = true;
      this.calculate();
    },
    stop: function stop() {
      if (!this.active) {
        return;
      }

      event.removeEventHandler(this.list, 'splice', this, this.spliceHandler);
      event.removeEventHandler(this.list, 'push', this, this.pushHandler);

      for (var i = 0; i < this.adminList.length; ++i) {
        var admin = this.adminList[i];
        admin.calculatedProperty.stop();
      }

      this.adminList = [];
      this.active = false;
    },
    eventHandlerModificationHandler: function eventHandlerModificationHandler(action, sender, signal, receiver, handler) {
      if (sender !== this.targetList) {
        return;
      }

      if (signal !== 'splice' && signal !== 'push' && signal !== 'setLength') {
        return;
      }

      switch (action) {
        case 'add':
          this.incUsage();
          break;

        case 'remove':
          this.decUsage();
          break;
      }
    },
    spliceHandler: function spliceHandler(signal, spliceArgs) {// override
    },
    pushHandler: function pushHandler(signal, pushArgs) {
      var spliceArgs = [this.list.length - pushArgs.length, 0];
      spliceArgs.push.apply(spliceArgs, pushArgs);
      this.spliceHandler('splice', spliceArgs);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy90dC9saXN0L0xpc3RNYW5hZ2VyLmpzIl0sIm5hbWVzIjpbImRlZmluZSIsImNvcmUiLCJldmVudCIsImRlZmluZUNsYXNzIiwiaW5pdCIsInBhcmFtcyIsImFkbWluTGlzdCIsInVzYWdlQ291bnRlciIsImFjdGl2ZSIsImFkZE1vZGlmaWNhdGlvbkhhbmRsZXIiLCJ0YXJnZXRMaXN0IiwiZXZlbnRIYW5kbGVyTW9kaWZpY2F0aW9uSGFuZGxlciIsImJpbmQiLCJpbmNVc2FnZSIsInN0YXJ0IiwiZGVjVXNhZ2UiLCJzdG9wIiwiY2FsY3VsYXRlIiwicmVtb3ZlRXZlbnRIYW5kbGVyIiwibGlzdCIsInNwbGljZUhhbmRsZXIiLCJwdXNoSGFuZGxlciIsImkiLCJsZW5ndGgiLCJhZG1pbiIsImNhbGN1bGF0ZWRQcm9wZXJ0eSIsImFjdGlvbiIsInNlbmRlciIsInNpZ25hbCIsInJlY2VpdmVyIiwiaGFuZGxlciIsInNwbGljZUFyZ3MiLCJwdXNoQXJncyIsInB1c2giLCJhcHBseSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsTUFBTSxDQUFDLENBQUMsaUJBQUQsRUFBb0Isa0JBQXBCLENBQUQsRUFBMEMsVUFBVUMsSUFBVixFQUFnQkMsS0FBaEIsRUFBdUI7QUFFbkUsU0FBT0QsSUFBSSxDQUFDRSxXQUFMLENBQWlCO0FBRXBCQyxJQUFBQSxJQUFJLEVBQUUsY0FBVUMsTUFBVixFQUFrQjtBQUNwQixXQUFLQyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsV0FBS0MsWUFBTCxHQUFvQixDQUFwQjtBQUNBLFdBQUtDLE1BQUwsR0FBYyxLQUFkO0FBQ0FOLE1BQUFBLEtBQUssQ0FBQ08sc0JBQU4sQ0FBNkIsS0FBS0MsVUFBbEMsRUFBOEMsS0FBS0MsK0JBQUwsQ0FBcUNDLElBQXJDLENBQTBDLElBQTFDLENBQTlDO0FBQ0gsS0FQbUI7QUFTcEJDLElBQUFBLFFBQVEsRUFBRSxvQkFBWTtBQUNsQixXQUFLTixZQUFMOztBQUNBLFVBQUksS0FBS0EsWUFBTCxHQUFvQixDQUFwQixJQUF5QixDQUFDLEtBQUtDLE1BQW5DLEVBQTJDO0FBQ3ZDLGFBQUtNLEtBQUw7QUFDSDtBQUNKLEtBZG1CO0FBZ0JwQkMsSUFBQUEsUUFBUSxFQUFFLG9CQUFZO0FBQ2xCLFVBQUksS0FBS1IsWUFBTCxLQUFzQixDQUExQixFQUE2QjtBQUN6QixjQUFNLGVBQU47QUFDSDs7QUFDRCxXQUFLQSxZQUFMOztBQUNBLFVBQUksS0FBS0EsWUFBTCxLQUFzQixDQUF0QixHQUEwQixLQUFLQyxNQUFuQyxFQUEyQztBQUN2QyxhQUFLUSxJQUFMO0FBQ0g7QUFDSixLQXhCbUI7QUEwQnBCRixJQUFBQSxLQUFLLEVBQUUsaUJBQVk7QUFDZixVQUFJLEtBQUtOLE1BQVQsRUFBaUI7QUFDYjtBQUNIOztBQUNELFdBQUtBLE1BQUwsR0FBYyxJQUFkO0FBQ0EsV0FBS1MsU0FBTDtBQUNILEtBaENtQjtBQWtDcEJELElBQUFBLElBQUksRUFBRSxnQkFBWTtBQUNkLFVBQUksQ0FBQyxLQUFLUixNQUFWLEVBQWtCO0FBQ2Q7QUFDSDs7QUFDRE4sTUFBQUEsS0FBSyxDQUFDZ0Isa0JBQU4sQ0FBeUIsS0FBS0MsSUFBOUIsRUFBb0MsUUFBcEMsRUFBOEMsSUFBOUMsRUFBb0QsS0FBS0MsYUFBekQ7QUFDQWxCLE1BQUFBLEtBQUssQ0FBQ2dCLGtCQUFOLENBQXlCLEtBQUtDLElBQTlCLEVBQW9DLE1BQXBDLEVBQTRDLElBQTVDLEVBQWtELEtBQUtFLFdBQXZEOztBQUNBLFdBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxLQUFLaEIsU0FBTCxDQUFlaUIsTUFBbkMsRUFBMkMsRUFBRUQsQ0FBN0MsRUFBZ0Q7QUFDNUMsWUFBSUUsS0FBSyxHQUFHLEtBQUtsQixTQUFMLENBQWVnQixDQUFmLENBQVo7QUFDQUUsUUFBQUEsS0FBSyxDQUFDQyxrQkFBTixDQUF5QlQsSUFBekI7QUFDSDs7QUFDRCxXQUFLVixTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsV0FBS0UsTUFBTCxHQUFjLEtBQWQ7QUFDSCxLQTlDbUI7QUFnRHBCRyxJQUFBQSwrQkFBK0IsRUFBRSx5Q0FBVWUsTUFBVixFQUFrQkMsTUFBbEIsRUFBMEJDLE1BQTFCLEVBQWtDQyxRQUFsQyxFQUE0Q0MsT0FBNUMsRUFBcUQ7QUFDbEYsVUFBSUgsTUFBTSxLQUFLLEtBQUtqQixVQUFwQixFQUFnQztBQUM1QjtBQUNIOztBQUNELFVBQUlrQixNQUFNLEtBQUssUUFBWCxJQUF1QkEsTUFBTSxLQUFLLE1BQWxDLElBQTRDQSxNQUFNLEtBQUssV0FBM0QsRUFBd0U7QUFDcEU7QUFDSDs7QUFDRCxjQUFRRixNQUFSO0FBQ0ksYUFBSyxLQUFMO0FBQ0ksZUFBS2IsUUFBTDtBQUNBOztBQUNKLGFBQUssUUFBTDtBQUNJLGVBQUtFLFFBQUw7QUFDQTtBQU5SO0FBUUgsS0EvRG1CO0FBaUVwQkssSUFBQUEsYUFBYSxFQUFFLHVCQUFVUSxNQUFWLEVBQWtCRyxVQUFsQixFQUE4QixDQUN6QztBQUNILEtBbkVtQjtBQXFFcEJWLElBQUFBLFdBQVcsRUFBRSxxQkFBVU8sTUFBVixFQUFrQkksUUFBbEIsRUFBNEI7QUFDckMsVUFBSUQsVUFBVSxHQUFHLENBQUMsS0FBS1osSUFBTCxDQUFVSSxNQUFWLEdBQW1CUyxRQUFRLENBQUNULE1BQTdCLEVBQXFDLENBQXJDLENBQWpCO0FBQ0FRLE1BQUFBLFVBQVUsQ0FBQ0UsSUFBWCxDQUFnQkMsS0FBaEIsQ0FBc0JILFVBQXRCLEVBQWtDQyxRQUFsQztBQUNBLFdBQUtaLGFBQUwsQ0FBbUIsUUFBbkIsRUFBNkJXLFVBQTdCO0FBQ0g7QUF6RW1CLEdBQWpCLENBQVA7QUE4RUgsQ0FoRkssQ0FBTiIsInNvdXJjZXNDb250ZW50IjpbImRlZmluZShbJy4uLy4uL2NvcmUvY29yZScsICcuLi8uLi9jb3JlL2V2ZW50J10sIGZ1bmN0aW9uIChjb3JlLCBldmVudCkge1xuXG4gICAgcmV0dXJuIGNvcmUuZGVmaW5lQ2xhc3Moe1xuXG4gICAgICAgIGluaXQ6IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICAgICAgICAgIHRoaXMuYWRtaW5MaXN0ID0gW107XG4gICAgICAgICAgICB0aGlzLnVzYWdlQ291bnRlciA9IDA7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgZXZlbnQuYWRkTW9kaWZpY2F0aW9uSGFuZGxlcih0aGlzLnRhcmdldExpc3QsIHRoaXMuZXZlbnRIYW5kbGVyTW9kaWZpY2F0aW9uSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSxcblxuICAgICAgICBpbmNVc2FnZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy51c2FnZUNvdW50ZXIrKztcbiAgICAgICAgICAgIGlmICh0aGlzLnVzYWdlQ291bnRlciA+IDAgJiYgIXRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGRlY1VzYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy51c2FnZUNvdW50ZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aHJvdyAncHJvZ3JhbSBlcnJvcic7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVzYWdlQ291bnRlci0tO1xuICAgICAgICAgICAgaWYgKHRoaXMudXNhZ2VDb3VudGVyID09PSAwICYgdGhpcy5hY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzdGFydDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGUoKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzdG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucmVtb3ZlRXZlbnRIYW5kbGVyKHRoaXMubGlzdCwgJ3NwbGljZScsIHRoaXMsIHRoaXMuc3BsaWNlSGFuZGxlcik7XG4gICAgICAgICAgICBldmVudC5yZW1vdmVFdmVudEhhbmRsZXIodGhpcy5saXN0LCAncHVzaCcsIHRoaXMsIHRoaXMucHVzaEhhbmRsZXIpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFkbWluTGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBhZG1pbiA9IHRoaXMuYWRtaW5MaXN0W2ldO1xuICAgICAgICAgICAgICAgIGFkbWluLmNhbGN1bGF0ZWRQcm9wZXJ0eS5zdG9wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkbWluTGlzdCA9IFtdO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgfSxcblxuICAgICAgICBldmVudEhhbmRsZXJNb2RpZmljYXRpb25IYW5kbGVyOiBmdW5jdGlvbiAoYWN0aW9uLCBzZW5kZXIsIHNpZ25hbCwgcmVjZWl2ZXIsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgIGlmIChzZW5kZXIgIT09IHRoaXMudGFyZ2V0TGlzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzaWduYWwgIT09ICdzcGxpY2UnICYmIHNpZ25hbCAhPT0gJ3B1c2gnICYmIHNpZ25hbCAhPT0gJ3NldExlbmd0aCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FkZCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5jVXNhZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWNVc2FnZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBzcGxpY2VIYW5kbGVyOiBmdW5jdGlvbiAoc2lnbmFsLCBzcGxpY2VBcmdzKSB7XG4gICAgICAgICAgICAvLyBvdmVycmlkZVxuICAgICAgICB9LFxuXG4gICAgICAgIHB1c2hIYW5kbGVyOiBmdW5jdGlvbiAoc2lnbmFsLCBwdXNoQXJncykge1xuICAgICAgICAgICAgdmFyIHNwbGljZUFyZ3MgPSBbdGhpcy5saXN0Lmxlbmd0aCAtIHB1c2hBcmdzLmxlbmd0aCwgMF07XG4gICAgICAgICAgICBzcGxpY2VBcmdzLnB1c2guYXBwbHkoc3BsaWNlQXJncywgcHVzaEFyZ3MpO1xuICAgICAgICAgICAgdGhpcy5zcGxpY2VIYW5kbGVyKCdzcGxpY2UnLCBzcGxpY2VBcmdzKTtcbiAgICAgICAgfVxuXG5cbiAgICB9KTtcblxufSk7Il19